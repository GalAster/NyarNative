type Result⟨T⟩ = std::result::Result⟨T, Error⟩;



type List⟨+T, -A⟩ {

}


alias type int = Integer;

class Integer(base Number) {
    refine {
        requires() {
            Self > 0;
        }
        ensures() {

        }
    }
}

template {
    ensures {
    result == 5
    }
}
function five(): i32 {
    5
}

template {
    ensures {
    result.0 / 2 == result.1;
    result.2 == 'a';
    self.len() == @old(self.len());
    }
    after_expiry {
        forall {
        a > b
        }
    }
}
#[ensures(result.0 / 2 == result.1 && result.2 == 'a')]
function tuple(): (i32, i32, char) {
    (10, 5, 'a')
}


predicate function all_zeroes(a: &MyArray) -> bool {
    forall(lambda(i: usize) {
        0 <= i && i < a.len() ==> a.lookup(i) == 0
    })
}
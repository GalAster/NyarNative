namespace std.create.test;





union TestUnion1 {}

union A(BaseUnion): A + B {
    A,
    Bb,
    Ccc,
}

union Test2{
    Test,
    Nothing,
    Test{},
    Field {
        public static field_a,
        mut field_b
    },

    nice(){
        let field = 2;
    }

    display() {}
}

union Option⟨T⟩ {
    // Some value of type `T`.
    Some {
        value: T
    },
    // No value.
    None,
}

union Either⟨L, R⟩ {
    Left {
        value: L
    },
    Riht {
        value: R
    },
}

template T, E {
    where {
        E: Error
    }
}
union Result⟨T, E⟩
{
    Success {
        fine: T
    },
    Failure {
        fail: E
    },
}

union Validation⟨T, E⟩ {
    Fine {
        value: T,
        errors: List⟨E⟩
    },
    Fail {
        fatal: E,
        errors: List⟨E⟩
    },
    as_result(self): Result⟨T, E⟩ {
        match self {
            case Fine { value, ... }:
                Success(value)
            case Fail { fatal, ... }:
                Failure(fatal)
        }
    }
    as_option(self): Option⟨T⟩ {
        match self {
            case Fine { value, ... }:
                Some(value)
            case Fail { fatal, ... }:
                None
        }
    }
}

extends Validation {
    is_true(self): bool {
        @matches(self, Fine(_, []))
    }
}
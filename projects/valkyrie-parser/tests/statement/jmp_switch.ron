SwitchStatement {
    patterns: [],
    span: 0..13,
}
SwitchStatement {
    patterns: [
        PatternBranch {
            condition: PatternWhenNode {
                guard: true,
                span: 26..38,
            },
            continuation: [
                1,
            ],
            span: 26..38,
        },
        PatternBranch {
            condition: Guaranteed,
            continuation: [
                2,
            ],
            span: 40..47,
        },
    ],
    span: 17..48,
}
SwitchStatement {
    patterns: [
        PatternBranch {
            condition: PatternCaseNode {
                pattern: IdentifierPattern {
                    modifiers: [],
                    identifier: Identifier("", 0..0),
                },
                guard: None,
                span: 66..84,
            },
            continuation: [
                a,
            ],
            span: 66..84,
        },
        PatternBranch {
            condition: PatternTypeNode {
                typing: B,
                guard: None,
                span: 91..109,
            },
            continuation: [
                b,
            ],
            span: 91..109,
        },
        PatternBranch {
            condition: PatternWhenNode {
                guard: InfixNode {
                    infix: >,
                    lhs: c,
                    rhs: 0,
                },
                span: 116..138,
            },
            continuation: [
                c,
            ],
            span: 116..138,
        },
        PatternBranch {
            condition: Guaranteed,
            continuation: [
                d,
            ],
            span: 145..161,
        },
    ],
    span: 52..165,
}

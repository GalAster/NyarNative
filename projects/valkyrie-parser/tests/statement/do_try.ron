NamespaceDeclaration {
    kind: Standalone,
    path: std∷create∷test,
}
TryStatement {
    handler: None,
    body: [],
    span: 28..36,
}
TryStatement {
    handler: Some(
        UnaryNode {
            prefix: ℃,
            base: String,
        },
    ),
    body: [],
    span: 38..54,
}
TryStatement {
    handler: Some(
        GenericCallNode {
            monadic: false,
            base: Option,
            term: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: T,
                    },
                ],
            },
            span: 66..69,
        },
    ),
    body: [],
    span: 56..74,
}
MatchCallNode {
    monadic: true,
    base: MatchCallNode {
        monadic: false,
        base: TryStatement {
            handler: Some(
                GenericCallNode {
                    monadic: false,
                    base: Result,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: T,
                            },
                            TupleTermNode {
                                key: None,
                                value: Noop,
                            },
                        ],
                    },
                    span: 86..95,
                },
            ),
            body: [
                ApplyCallNode {
                    monadic: false,
                    caller: print,
                    arguments: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: 'try',
                            },
                        ],
                    },
                    body: None,
                    span: 107..114,
                },
            ],
            span: 76..117,
        },
        kind: Effect,
        patterns: PatternBlock {
            branches: [],
            span: 0..0,
        },
        span: 118..181,
    },
    kind: Typing,
    patterns: PatternBlock {
        branches: [],
        span: 0..0,
    },
    span: 181..234,
}

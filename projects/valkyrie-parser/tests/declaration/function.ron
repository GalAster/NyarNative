FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun1", 6..10),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [],
    parameters: [],
    returns: Auto,
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun2", 25..29),
        ],
    },
    kind: Macro,
    annotations: Empty,
    generics: [],
    parameters: [],
    returns: ReturnType {
        main: R,
    },
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun3", 51..55),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [],
    parameters: [
        Parameter {
            key: "a",
        },
        Parameter {
            key: "k",
            bound: T,
        },
        Parameter {
            key: "p",
            bound: U,
            default: 1,
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: [
        ApplyCallNode {
            monadic: false,
            caller: print,
            arguments: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: 'Hello, world!',
                    },
                ],
            },
            body: None,
            span: 91..108,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun4", 119..123),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "G",
        },
        Parameter {
            key: "R",
        },
    ],
    parameters: [
        Parameter {
            key: "g",
            bound: G,
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: [
        InfixNode {
            infix: +,
            lhs: 1,
            rhs: 1,
        },
        InfixNode {
            infix: ∈,
            lhs: a,
            rhs: b,
        },
        ApplyCallNode {
            monadic: false,
            caller: print,
            arguments: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: 'Hello, world!',
                    },
                ],
            },
            body: None,
            span: 173..190,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("outer", 201..206),
        ],
    },
    kind: Macro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "L",
        },
    ],
    parameters: [
        Parameter {
            key: "lhs",
            bound: L,
        },
    ],
    returns: ReturnType {
        main: String,
    },
    body: [
        LambdaNode {
            annotations: Empty,
            generics: [
                Parameter {
                    key: "R",
                },
            ],
            parameters: [
                Parameter {
                    key: "rhs",
                    bound: R,
                },
            ],
            returns: Auto,
            body: [
                WhileLoop {
                    kind: While,
                    condition: Unconditional,
                    then: [
                        InfixNode {
                            infix: +=,
                            lhs: count,
                            rhs: 1,
                        },
                        ApplyCallNode {
                            monadic: false,
                            caller: print,
                            arguments: ArgumentsList {
                                terms: [
                                    TupleTermNode {
                                        key: None,
                                        value: '{lhs} {rhs}',
                                    },
                                ],
                            },
                            body: None,
                            span: 346..361,
                        },
                    ],
                    span: 287..376,
                },
            ],
            span: 259..377,
        },
        '{count}',
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("main", 421..425),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            public,
            static,
            final,
        ],
    },
    generics: [],
    parameters: [
        Parameter {
            key: "args",
            annotations: Annotation {
                modifiers: [
                    mut,
                ],
            },
            bound: GenericCallNode {
                monadic: false,
                base: List,
                term: ArgumentsList {
                    terms: [
                        TupleTermNode {
                            key: None,
                            value: String,
                        },
                    ],
                },
                span: 440..448,
            },
        },
    ],
    returns: ReturnType {
        main: int,
    },
    body: [
        ApplyCallNode {
            monadic: false,
            caller: ApplyCallNode {
                monadic: false,
                caller: outer,
                arguments: ArgumentsList {
                    terms: [
                        TupleTermNode {
                            key: None,
                            value: 'Hello',
                        },
                    ],
                },
                body: None,
                span: 468..477,
            },
            arguments: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: 'world',
                    },
                ],
            },
            body: None,
            span: 477..486,
        },
        Control {
            kind: Return,
            expression: 0,
            span: 491..499,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("name", 512..516),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [],
    parameters: [],
    returns: Auto,
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("package", 533..540),
            Identifier("module", 542..548),
            Identifier("function", 550..560),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [],
    parameters: [
        Parameter {
            key: "position_only",
        },
        <<<disable-index-parameters>>>,
        Parameter {
            key: "free",
            bound: int,
            default: 1,
        },
        <<<require-named-parameters>>>,
        Parameter {
            key: "name_only",
        },
        Parameter {
            key: "name",
            annotations: Annotation {
                modifiers: [
                    context,
                ],
            },
        },
        Parameter {
            key: "list_catch",
        },
        Parameter {
            key: "dict_catch",
        },
    ],
    returns: Auto,
    body: [
        markdown'*italic*',
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("return_self", 1342..1353),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [],
    parameters: [
        Parameter {
            key: "effect",
            bound: int,
        },
    ],
    returns: ReturnType {
        main: Equirecursive,
    },
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("progress", 1396..1404),
        ],
    },
    kind: Macro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "R",
        },
        Parameter {
            key: "P",
        },
    ],
    parameters: [],
    returns: ReturnType {
        main: R,
    },
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("package", 1449..1456),
            Identifier("path", 1458..1462),
            Identifier("range", 1464..1469),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            inline,
        ],
    },
    generics: [],
    parameters: [
        Parameter {
            key: "min",
            bound: int,
        },
        Parameter {
            key: "max",
            bound: int,
        },
        Parameter {
            key: "step",
            bound: int,
        },
    ],
    returns: ReturnType {
        main: Range,
    },
    body: [
        ConstructNewNode {
            annotations: Annotation {
                modifiers: [
                    lazy,
                ],
            },
            namepath: NamePathNode {
                names: [
                    Identifier("std", 1523..1526),
                    Identifier("iterator", 1528..1536),
                    Identifier("Range", 1538..1543),
                ],
            },
            generics: [
                ArgumentsList {
                    terms: [
                        TupleTermNode {
                            key: None,
                            value: int,
                        },
                    ],
                },
            ],
            arguments: TupleNode {
                kind: Tuple,
                terms: ArgumentsList {
                    terms: [],
                },
                span: 1552..1554,
            },
            body: [],
            span: 1514..1644,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("name", 1653..1657),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [],
    parameters: [
        Parameter {
            key: "a",
        },
        Parameter {
            key: "k",
            bound: T,
        },
        Parameter {
            key: "p",
            bound: U,
            default: 1,
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: [
        ApplyCallNode {
            monadic: false,
            caller: print,
            arguments: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: 'Hello, world!',
                    },
                ],
            },
            body: None,
            span: 1693..1710,
        },
    ],
}
ClassDeclaration {
    name: Identifier("TClass", 1752..1758),
    kind: Class,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 1716..1722),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    generic: None,
    base_classes: None,
    auto_traits: [],
    terms: [
        Field {
            name: fields,
        },
    ],
    span: 1715..1776,
}
ExtendsStatement {
    implements: None,
    body: [
        Field {
            name: functions,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("name", 1830..1834),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 1813..1819),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    generics: [],
    parameters: [
        Parameter {
            key: "args",
        },
    ],
    returns: Auto,
    body: [
        block,
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("print", 1894..1899),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            public,
            static,
            void,
            fun,
            main,
        ],
    },
    generics: [
        Parameter {
            key: "P",
        },
    ],
    parameters: [
        Parameter {
            key: "w",
            bound: Write,
        },
        <<<disable-index-parameters>>>,
        <<<disable-index-parameters>>>,
    ],
    returns: Auto,
    body: [
        ApplyCallNode {
            monadic: false,
            caller: DotCallNode {
                monadic: false,
                base: LambdaNode {
                    annotations: Empty,
                    generics: [],
                    parameters: [
                        Parameter {
                            key: "args",
                        },
                        <<<disable-index-parameters>>>,
                        <<<disable-index-parameters>>>,
                    ],
                    returns: ReturnType {
                        main: T,
                    },
                    body: [
                        ApplyCallNode {
                            monadic: false,
                            caller: DotCallNode {
                                monadic: false,
                                base: w,
                                term: write,
                                span: 1982..1988,
                            },
                            arguments: ArgumentsList {
                                terms: [
                                    TupleTermNode {
                                        key: None,
                                        value: this,
                                    },
                                ],
                            },
                            body: None,
                            span: 1988..1994,
                        },
                    ],
                    span: 1945..2000,
                },
                term: call,
                span: 2005..2010,
            },
            arguments: ArgumentsList {
                terms: [],
            },
            body: None,
            span: 2010..2012,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("main", 2069..2073),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("require", 2018..2025),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
        modifiers: [
            public,
            static,
            void,
            fun,
            main,
        ],
    },
    generics: [],
    parameters: [
        Parameter {
            key: "args",
            bound: GenericCallNode {
                monadic: false,
                base: List,
                term: ArgumentsList {
                    terms: [
                        TupleTermNode {
                            key: None,
                            value: String,
                        },
                    ],
                },
                span: 2084..2096,
            },
        },
        Parameter {
            key: "a",
        },
    ],
    returns: Auto,
    body: [
        InfixNode {
            infix: /@,
            lhs: InfixNode {
                infix: /@,
                lhs: InfixNode {
                    infix: /@,
                    lhs: a,
                    rhs: b,
                },
                rhs: c,
            },
            rhs: UnaryNode {
                prefix: ⁒,
                base: d,
            },
        },
        InfixNode {
            infix: ÷,
            lhs: 2,
            rhs: 3,
        },
    ],
}

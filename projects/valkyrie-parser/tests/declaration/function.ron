FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun1", 6..10),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: None,
    parameters: [],
    returns: Auto,
    body: StatementBlock {
        terms: [],
        span: 13..17,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun2", 25..29),
        ],
    },
    kind: Macro,
    annotations: Empty,
    generic: None,
    parameters: [],
    returns: ReturnType {
        main: R,
    },
    body: StatementBlock {
        terms: [],
        span: 35..39,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun3", 51..55),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("a", 56..57),
            bound: None,
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("k", 59..60),
            bound: Some(
                T,
            ),
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("p", 65..66),
            bound: Some(
                U,
            ),
            default: Some(
                1,
            ),
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: ApplyCallNode {
                    monadic: false,
                    caller: print,
                    arguments: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: 'Hello, world!',
                            },
                        ],
                    },
                    body: None,
                    span: 91..108,
                },
                span: 86..109,
            },
        ],
        span: 80..110,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("fun4", 119..123),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: Some(
        [
            Single {
                annotations: Empty,
                key: Identifier("G", 124..125),
                bound: None,
                default: None,
            },
            Single {
                annotations: Empty,
                key: Identifier("R", 127..128),
                bound: None,
                default: None,
            },
        ],
    ),
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("g", 130..131),
            bound: Some(
                G,
            ),
            default: None,
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: InfixNode {
                    infix: +,
                    lhs: 1,
                    rhs: 1,
                },
                span: 147..157,
            },
            ExpressionNode {
                omit: false,
                body: InfixNode {
                    infix: ∈,
                    lhs: a,
                    rhs: b,
                },
                span: 157..168,
            },
            ExpressionNode {
                omit: false,
                body: ApplyCallNode {
                    monadic: false,
                    caller: print,
                    arguments: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: 'Hello, world!',
                            },
                        ],
                    },
                    body: None,
                    span: 173..190,
                },
                span: 168..191,
            },
        ],
        span: 141..192,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("outer", 201..206),
        ],
    },
    kind: Macro,
    annotations: Empty,
    generic: Some(
        [
            Single {
                annotations: Empty,
                key: Identifier("L", 207..208),
                bound: None,
                default: None,
            },
        ],
    ),
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("lhs", 210..213),
            bound: Some(
                L,
            ),
            default: None,
        },
    ],
    returns: ReturnType {
        main: String,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: LambdaNode {
                    annotations: Empty,
                    generic: Some(
                        [
                            Single {
                                annotations: Empty,
                                key: Identifier("R", 266..267),
                                bound: None,
                                default: None,
                            },
                        ],
                    ),
                    parameters: [
                        Single {
                            annotations: Empty,
                            key: Identifier("rhs", 269..272),
                            bound: Some(
                                R,
                            ),
                            default: None,
                        },
                    ],
                    returns: Auto,
                    body: StatementBlock {
                        terms: [
                            WhileLoop {
                                kind: While,
                                condition: Unconditional,
                                then: StatementBlock {
                                    terms: [
                                        ExpressionNode {
                                            omit: false,
                                            body: InfixNode {
                                                infix: +=,
                                                lhs: count,
                                                rhs: 1,
                                            },
                                            span: 318..341,
                                        },
                                        ExpressionNode {
                                            omit: false,
                                            body: ApplyCallNode {
                                                monadic: false,
                                                caller: print,
                                                arguments: ArgumentsList {
                                                    terms: [
                                                        TupleTermNode {
                                                            key: None,
                                                            value: '{lhs} {rhs}',
                                                        },
                                                    ],
                                                },
                                                body: None,
                                                span: 346..361,
                                            },
                                            span: 341..370,
                                        },
                                    ],
                                    span: 304..371,
                                },
                                span: 287..376,
                            },
                        ],
                        span: 277..377,
                    },
                    span: 259..377,
                },
                span: 259..382,
            },
            ExpressionNode {
                omit: false,
                body: '{count}',
                span: 382..392,
            },
        ],
        span: 228..393,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("main", 421..425),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            public,
            static,
            final,
        ],
    },
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("args", 430..434),
            bound: Some(
                GenericCallNode {
                    monadic: false,
                    base: List,
                    terms: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: String,
                            },
                        ],
                    },
                    associated: [],
                    span: 440..448,
                },
            ),
            default: None,
        },
    ],
    returns: ReturnType {
        main: int,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: ApplyCallNode {
                    monadic: false,
                    caller: ApplyCallNode {
                        monadic: false,
                        caller: outer,
                        arguments: ArgumentsList {
                            terms: [
                                TupleTermNode {
                                    key: None,
                                    value: 'Hello',
                                },
                            ],
                        },
                        body: None,
                        span: 468..477,
                    },
                    arguments: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: 'world',
                            },
                        ],
                    },
                    body: None,
                    span: 477..486,
                },
                span: 463..491,
            },
            Control {
                kind: Return,
                expression: 0,
                span: 491..499,
            },
        ],
        span: 457..501,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("name", 512..516),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: None,
    parameters: [],
    returns: Auto,
    body: StatementBlock {
        terms: [],
        span: 519..521,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("package", 533..540),
            Identifier("module", 542..548),
            Identifier("function", 550..560),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("position_only", 614..627),
            bound: None,
            default: None,
        },
        LMark,
        Single {
            annotations: Empty,
            key: Identifier("free", 690..694),
            bound: Some(
                int,
            ),
            default: Some(
                1,
            ),
        },
        RMark,
        Single {
            annotations: Empty,
            key: Identifier("name_only", 761..770),
            bound: None,
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("name", 989..993),
            bound: None,
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("list_catch", 1141..1151),
            bound: None,
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("dict_catch", 1295..1305),
            bound: None,
            default: None,
        },
    ],
    returns: Auto,
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: markdown'*italic*',
                span: 1314..1333,
            },
        ],
        span: 1308..1334,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("return_self", 1342..1353),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("effect", 1354..1360),
            bound: Some(
                int,
            ),
            default: None,
        },
    ],
    returns: ReturnType {
        main: Equirecursive,
    },
    body: StatementBlock {
        terms: [],
        span: 1384..1388,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("progress", 1396..1404),
        ],
    },
    kind: Macro,
    annotations: Empty,
    generic: Some(
        [
            Single {
                annotations: Empty,
                key: Identifier("R", 1407..1408),
                bound: None,
                default: None,
            },
            Single {
                annotations: Empty,
                key: Identifier("P", 1410..1411),
                bound: None,
                default: None,
            },
        ],
    ),
    parameters: [],
    returns: ReturnType {
        main: R,
    },
    body: StatementBlock {
        terms: [],
        span: 1424..1428,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("package", 1449..1456),
            Identifier("path", 1458..1462),
            Identifier("range", 1464..1469),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            inline,
        ],
    },
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("min", 1470..1473),
            bound: Some(
                int,
            ),
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("max", 1480..1483),
            bound: Some(
                int,
            ),
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("step", 1490..1494),
            bound: Some(
                int,
            ),
            default: None,
        },
    ],
    returns: ReturnType {
        main: Range,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: ConstructNewNode {
                    modifiers: [],
                    namepath: NamePathNode {
                        names: [
                            Identifier("std", 1523..1526),
                            Identifier("iterator", 1528..1536),
                            Identifier("Range", 1538..1543),
                        ],
                    },
                    generic: GenericCallNode {
                        monadic: false,
                        base: Placeholder,
                        terms: ArgumentsList {
                            terms: [],
                        },
                        associated: [],
                        span: 0..0,
                    },
                    arguments: ApplyCallNode {
                        monadic: false,
                        caller: Placeholder,
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        body: None,
                        span: 0..0,
                    },
                    body: CollectorNode {
                        terms: [],
                        span: 0..0,
                    },
                    span: 1514..1644,
                },
                span: 1514..1644,
            },
        ],
        span: 1508..1645,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("name", 1653..1657),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("a", 1658..1659),
            bound: None,
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("k", 1661..1662),
            bound: Some(
                T,
            ),
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("p", 1667..1668),
            bound: Some(
                U,
            ),
            default: Some(
                1,
            ),
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: ApplyCallNode {
                    monadic: false,
                    caller: print,
                    arguments: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: 'Hello, world!',
                            },
                        ],
                    },
                    body: None,
                    span: 1693..1710,
                },
                span: 1688..1711,
            },
        ],
        span: 1682..1712,
    },
}
ClassDeclaration {
    name: Identifier("TClass", 1752..1758),
    kind: Class,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 1716..1722),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    generic: None,
    base_classes: None,
    auto_traits: [],
    terms: [
        FieldDeclaration {
            name: Identifier("fields", 1765..1771),
            annotations: Empty,
            typing: None,
            default: None,
            span: 1765..1771,
        },
    ],
    span: 1715..1776,
}
ExtendsStatement {
    methods: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("name", 1830..1834),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 1813..1819),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("args", 1835..1839),
            bound: None,
            default: None,
        },
    ],
    returns: Auto,
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: block,
                span: 1847..1853,
            },
        ],
        span: 1841..1854,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("print", 1894..1899),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            public,
            static,
            void,
            fun,
            main,
        ],
    },
    generic: Some(
        [
            Single {
                annotations: Empty,
                key: Identifier("P", 1902..1903),
                bound: None,
                default: None,
            },
        ],
    ),
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("w", 1907..1908),
            bound: Some(
                Write,
            ),
            default: None,
        },
        LMark,
        LMark,
    ],
    returns: Auto,
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: ApplyCallNode {
                    monadic: false,
                    caller: DotCallNode {
                        monadic: false,
                        base: LambdaNode {
                            annotations: Empty,
                            generic: None,
                            parameters: [
                                Single {
                                    annotations: Empty,
                                    key: Identifier("args", 1953..1957),
                                    bound: None,
                                    default: None,
                                },
                                LMark,
                                LMark,
                            ],
                            returns: ReturnType {
                                main: T,
                            },
                            body: StatementBlock {
                                terms: [
                                    ExpressionNode {
                                        omit: false,
                                        body: ApplyCallNode {
                                            monadic: false,
                                            caller: DotCallNode {
                                                monadic: false,
                                                base: w,
                                                term: write,
                                                span: 1982..1988,
                                            },
                                            arguments: ArgumentsList {
                                                terms: [
                                                    TupleTermNode {
                                                        key: None,
                                                        value: this,
                                                    },
                                                ],
                                            },
                                            body: None,
                                            span: 1988..1994,
                                        },
                                        span: 1981..1999,
                                    },
                                ],
                                span: 1971..2000,
                            },
                            span: 1945..2000,
                        },
                        term: call,
                        span: 2005..2010,
                    },
                    arguments: ArgumentsList {
                        terms: [],
                    },
                    body: None,
                    span: 2010..2012,
                },
                span: 1932..2013,
            },
        ],
        span: 1926..2014,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("main", 2069..2073),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("require", 2018..2025),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
        modifiers: [
            public,
            static,
            void,
            fun,
            main,
        ],
    },
    generic: None,
    parameters: [
        Single {
            annotations: Empty,
            key: Identifier("args", 2074..2078),
            bound: Some(
                GenericCallNode {
                    monadic: false,
                    base: List,
                    terms: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: String,
                            },
                        ],
                    },
                    associated: [],
                    span: 2084..2096,
                },
            ),
            default: None,
        },
        Single {
            annotations: Empty,
            key: Identifier("a", 2098..2099),
            bound: None,
            default: None,
        },
    ],
    returns: Auto,
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: InfixNode {
                    infix: /@,
                    lhs: InfixNode {
                        infix: /@,
                        lhs: InfixNode {
                            infix: /@,
                            lhs: a,
                            rhs: b,
                        },
                        rhs: c,
                    },
                    rhs: UnaryNode {
                        prefix: ⁒,
                        base: d,
                    },
                },
                span: 2107..2131,
            },
            ExpressionNode {
                omit: false,
                body: InfixNode {
                    infix: ÷,
                    lhs: 2,
                    rhs: 3,
                },
                span: 2131..2138,
            },
        ],
        span: 2101..2139,
    },
}

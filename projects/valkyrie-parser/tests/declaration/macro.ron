macro
ApplyCallNode {
    monadic: false,
    caller: a,
    arguments: ArgumentsList {
        terms: [],
    },
    body: None,
    span: 7..105,
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("A", 186..187),
        ],
    },
    kind: Macro,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 124..130),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
        modifiers: [
            derived,
        ],
    },
    generics: [],
    parameters: [],
    returns: Auto,
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("print", 215..220),
        ],
    },
    kind: Macro,
    annotations: Annotation {
        modifiers: [
            implicit,
        ],
    },
    generics: [],
    parameters: [],
    returns: Auto,
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("name", 234..238),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "G",
        },
        Parameter {
            key: "R",
        },
    ],
    parameters: [
        Parameter {
            key: "g",
            bound: G,
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: [
        InfixNode {
            infix: +,
            lhs: 1,
            rhs: 1,
        },
        InfixNode {
            infix: âˆˆ,
            lhs: a,
            rhs: b,
        },
        ApplyCallNode {
            monadic: false,
            caller: print,
            arguments: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: 'Hello, world!',
                    },
                ],
            },
            body: None,
            span: 294..311,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("outer", 322..327),
        ],
    },
    kind: Macro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "L",
        },
    ],
    parameters: [
        Parameter {
            key: "lhs",
            bound: L,
        },
    ],
    returns: ReturnType {
        main: String,
    },
    body: [
        let,
        mut,
        InfixNode {
            infix: =,
            lhs: count,
            rhs: 0,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("inner", 393..398),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "R",
        },
    ],
    parameters: [
        Parameter {
            key: "rhs",
            bound: R,
        },
    ],
    returns: Auto,
    body: [
        WhileLoop {
            kind: While,
            condition: Unconditional,
            then: [
                InfixNode {
                    infix: +=,
                    lhs: count,
                    rhs: 1,
                },
                ApplyCallNode {
                    monadic: false,
                    caller: print,
                    arguments: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: '{lhs} {rhs}',
                            },
                        ],
                    },
                    body: None,
                    span: 473..488,
                },
            ],
            span: 422..499,
        },
        '{count}',
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("main", 538..542),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            public,
            static,
            final,
        ],
    },
    generics: [],
    parameters: [
        Parameter {
            key: "args",
            bound: GenericCallNode {
                monadic: false,
                base: List,
                terms: ArgumentsList {
                    terms: [
                        TupleTermNode {
                            key: None,
                            value: String,
                        },
                    ],
                },
                associated: [],
                span: 557..569,
            },
        },
    ],
    returns: ReturnType {
        main: Int,
    },
    body: [
        ApplyCallNode {
            monadic: false,
            caller: ApplyCallNode {
                monadic: false,
                caller: outer,
                arguments: ArgumentsList {
                    terms: [
                        TupleTermNode {
                            key: None,
                            value: 'Hello',
                        },
                    ],
                },
                body: None,
                span: 589..598,
            },
            arguments: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: 'world',
                    },
                ],
            },
            body: None,
            span: 598..607,
        },
        Control {
            kind: Return,
            expression: 0,
            span: 612..620,
        },
    ],
}

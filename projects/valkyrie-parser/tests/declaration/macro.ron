macro
ApplyCallNode {
    monadic: false,
    caller: a,
    arguments: [],
    body: None,
    span: 7..105,
}
FunctionDeclaration {
    name: NamePathNode {
        path: [
            Identifier("A", 186..187),
        ],
        span: FileSpan {
            start: 186,
            end: 187,
            file: FileID(0xEB4A6BD4F8D3AE72),
        },
    },
    kind: Macro,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("derive", 124..130),
                    ],
                    span: FileSpan {
                        start: 124,
                        end: 130,
                        file: FileID(0xEB4A6BD4F8D3AE72),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 124..172,
            },
        ],
        modifiers: [
            derived,
        ],
    },
    generics: [],
    parameters: [],
    returns: Auto,
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        path: [
            Identifier("print", 215..220),
        ],
        span: FileSpan {
            start: 215,
            end: 220,
            file: FileID(0xEB4A6BD4F8D3AE72),
        },
    },
    kind: Macro,
    annotations: Annotation {
        modifiers: [
            implicit,
        ],
    },
    generics: [],
    parameters: [],
    returns: Auto,
    body: [],
}
FunctionDeclaration {
    name: NamePathNode {
        path: [
            Identifier("name", 234..238),
        ],
        span: FileSpan {
            start: 234,
            end: 238,
            file: FileID(0xEB4A6BD4F8D3AE72),
        },
    },
    kind: Micro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "G",
        },
        Parameter {
            key: "R",
        },
    ],
    parameters: [
        Parameter {
            key: "g",
            bound: G,
        },
    ],
    returns: ReturnType {
        main: R,
    },
    body: [
        InfixNode {
            infix: +,
            lhs: 1,
            rhs: 1,
        },
        InfixNode {
            infix: âˆˆ,
            lhs: a,
            rhs: b,
        },
        ApplyCallNode {
            monadic: false,
            caller: print,
            arguments: [
                ArgumentTerm {
                    modifiers: [],
                    key: Nothing,
                    value: 'Hello, world!',
                },
            ],
            body: None,
            span: 294..311,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        path: [
            Identifier("outer", 322..327),
        ],
        span: FileSpan {
            start: 322,
            end: 327,
            file: FileID(0xEB4A6BD4F8D3AE72),
        },
    },
    kind: Macro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "L",
        },
    ],
    parameters: [
        Parameter {
            key: "lhs",
            bound: L,
        },
    ],
    returns: ReturnType {
        main: String,
    },
    body: [
        VariableDeclaration {
            pattern: TuplePatternNode {
                bind: None,
                name: None,
                terms: [],
                span: 0..0,
            },
            body: 0,
            span: 361..384,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        path: [
            Identifier("inner", 393..398),
        ],
        span: FileSpan {
            start: 393,
            end: 398,
            file: FileID(0xEB4A6BD4F8D3AE72),
        },
    },
    kind: Micro,
    annotations: Empty,
    generics: [
        Parameter {
            key: "R",
        },
    ],
    parameters: [
        Parameter {
            key: "rhs",
            bound: R,
        },
    ],
    returns: Auto,
    body: [
        WhileLoop {
            kind: While,
            condition: Unconditional,
            then: [
                InfixNode {
                    infix: +=,
                    lhs: count,
                    rhs: 1,
                },
                ApplyCallNode {
                    monadic: false,
                    caller: print,
                    arguments: [
                        ArgumentTerm {
                            modifiers: [],
                            key: Nothing,
                            value: '{lhs} {rhs}',
                        },
                    ],
                    body: None,
                    span: 473..488,
                },
            ],
            span: 422..499,
        },
        '{count}',
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        path: [
            Identifier("main", 538..542),
        ],
        span: FileSpan {
            start: 538,
            end: 542,
            file: FileID(0xEB4A6BD4F8D3AE72),
        },
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            public,
            static,
            final,
        ],
    },
    generics: [],
    parameters: [
        Parameter {
            key: "args",
            annotations: Annotation {
                modifiers: [
                    mut,
                ],
            },
            bound: GenericCallNode {
                monadic: false,
                base: List,
                term: [
                    ArgumentTerm {
                        modifiers: [],
                        key: Nothing,
                        value: String,
                    },
                ],
                span: 557..569,
            },
        },
    ],
    returns: ReturnType {
        main: Int,
    },
    body: [
        ApplyCallNode {
            monadic: false,
            caller: ApplyCallNode {
                monadic: false,
                caller: outer,
                arguments: [
                    ArgumentTerm {
                        modifiers: [],
                        key: Nothing,
                        value: 'Hello',
                    },
                ],
                body: None,
                span: 589..598,
            },
            arguments: [
                ArgumentTerm {
                    modifiers: [],
                    key: Nothing,
                    value: 'world',
                },
            ],
            body: None,
            span: 598..607,
        },
        Control {
            kind: Return,
            expression: 0,
            span: 612..620,
        },
    ],
}

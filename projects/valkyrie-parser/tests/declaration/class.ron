NamespaceDeclaration {
    kind: Standalone,
    path: declaration∷classes,
}
Class {
    name: Base1,
    span: 33..49,
}
Class {
    name: Base2,
    span: 49..67,
}
Structure {
    name: Base3,
    span: 67..89,
}
Class {
    annotations: Annotation {
        modifiers: [
            value,
        ],
    },
    name: B,
    span: 89..113,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("derive", 114..120),
                    ],
                    span: FileSpan {
                        start: 114,
                        end: 120,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 114..162,
            },
        ],
    },
    name: Inherit1,
    span: 113..219,
}
Class {
    name: Inherit2,
    terms: [
        Field {
            name: virtual,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: base1,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: base2,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: base3,
        },
    ],
    span: 219..329,
}
Class {
    name: B,
    terms: [
        Field {
            name: item1,
        },
        Field {
            name: item2,
        },
    ],
    span: 329..392,
}
Class {
    name: A,
    terms: [
        Method {
            annotations: Annotation {
                modifiers: [
                    pub,
                    static,
                ],
            },
            name: a,
            returns: GenericCallNode {
                monadic: false,
                base: InfixNode {
                    infix: +,
                    lhs: GenericCallNode {
                        monadic: false,
                        base: Ref,
                        term: [
                            ArgumentTerm {
                                modifiers: [],
                                key: Nothing,
                                value: B,
                            },
                        ],
                        span: 448..455,
                    },
                    rhs: Gc,
                },
                term: [
                    ArgumentTerm {
                        modifiers: [],
                        key: Nothing,
                        value: D,
                    },
                ],
                span: 460..463,
            },
            body: [
                Control {
                    kind: Return,
                    expression: 1,
                    span: 474..482,
                },
            ],
            span: 429..488,
        },
        Field {
            name: _a,
        },
        Method {
            annotations: Annotation {
                modifiers: [
                    get,
                ],
            },
            name: a,
            body: [
                ApplyCallNode {
                    monadic: false,
                    caller: violate,
                    arguments: [],
                    body: None,
                    span: 526..567,
                },
                Control {
                    kind: Return,
                    expression: _a,
                    span: 576..585,
                },
            ],
            span: 501..591,
        },
        Method {
            annotations: Annotation {
                modifiers: [
                    set,
                ],
            },
            name: a,
            body: [
                InfixNode {
                    infix: =,
                    lhs: _a,
                    rhs: value,
                },
            ],
            span: 596..630,
        },
        Method {
            name: into,
            generics: [
                Parameter {
                    key: "bool",
                },
            ],
            body: [],
            span: 635..659,
        },
    ],
    span: 392..673,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("Copy", 675..679),
                    ],
                    span: FileSpan {
                        start: 675,
                        end: 679,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 675..686,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("Debug", 688..693),
                    ],
                    span: FileSpan {
                        start: 688,
                        end: 693,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 688..693,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("derive", 704..710),
                    ],
                    span: FileSpan {
                        start: 704,
                        end: 710,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 704..732,
            },
        ],
    },
    name: A,
    span: 673..753,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("Encode", 754..760),
                    ],
                    span: FileSpan {
                        start: 754,
                        end: 760,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 754..761,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("Decode", 762..768),
                    ],
                    span: FileSpan {
                        start: 762,
                        end: 768,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 762..769,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("derive", 771..777),
                    ],
                    span: FileSpan {
                        start: 771,
                        end: 777,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 771..801,
            },
        ],
        modifiers: [
            public,
            static,
            dynamic_transaction_safe,
            volatile,
            final,
        ],
    },
    name: Empty3,
    span: 753..883,
}
Class {
    annotations: Annotation {
        modifiers: [
            open,
            impart,
        ],
    },
    name: Inherit1,
    span: 883..950,
}
Class {
    annotations: Annotation {
        modifiers: [
            open,
            impart,
        ],
    },
    name: Inherit2,
    terms: [
        Field {
            annotations: Annotation {
                modifiers: [
                    public,
                ],
            },
            name: virtual,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: x_base,
        },
        Field {
            name: private,
        },
        Field {
            name: inline,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: _y_base,
        },
        Method {
            name: constructor,
            body: [],
            span: 1077..1099,
        },
    ],
    span: 950..1103,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("derive", 1104..1110),
                    ],
                    span: FileSpan {
                        start: 1104,
                        end: 1110,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 1104..1143,
            },
        ],
    },
    name: 原神,
    terms: [
        Method {
            name: 启动,
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: Unit,
            body: [
                shell'F:\\Games\\Genshin Impact\\UnityCrashHandler64.exe',
            ],
            span: 1200..1289,
        },
        Method {
            annotations: Annotation {
                modifiers: [
                    get,
                ],
            },
            name: value,
            returns: Integer,
            body: [
                _integer,
            ],
            span: 1294..1339,
        },
        Method {
            annotations: Annotation {
                modifiers: [
                    set,
                ],
            },
            name: value,
            body: [
                _integer,
            ],
            span: 1344..1380,
        },
    ],
    span: 1103..1384,
}
Class {
    name: ClassA,
    terms: [
        Field {
            annotations: Annotation {
                modifiers: [
                    public,
                    static,
                ],
            },
            name: type,
        },
        Field {
            name: unknown_all,
        },
        Field {
            name: default_value,
        },
        Field {
            name: infer_type,
        },
        Method {
            annotations: Annotation {
                modifiers: [
                    get,
                ],
            },
            name: property,
            body: [],
            span: 1508..1525,
        },
        Method {
            annotations: Annotation {
                modifiers: [
                    set,
                ],
            },
            name: property,
            body: [],
            span: 1531..1548,
        },
        Method {
            name: method,
            span: 1554..1562,
        },
        Method {
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            path: [
                                Identifier("decorator", 1571..1580),
                            ],
                            span: FileSpan {
                                start: 1571,
                                end: 1580,
                                file: FileID(0x65BE032B5F19EADD),
                            },
                        },
                        variant: [],
                        arguments: [],
                        domain: None,
                        span: 1571..1585,
                    },
                ],
                modifiers: [
                    infix,
                ],
            },
            name: /,
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "rhs",
                    bound: Self,
                },
            ],
            returns: Self,
            body: [
                Control {
                    kind: Return,
                    expression: InfixNode {
                        infix: /,
                        lhs: self,
                        rhs: rhs,
                    },
                    span: 1641..1658,
                },
            ],
            span: 1570..1664,
        },
        Method {
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            path: [
                                Identifier("inline", 1670..1676),
                            ],
                            span: FileSpan {
                                start: 1670,
                                end: 1676,
                                file: FileID(0x65BE032B5F19EADD),
                            },
                        },
                        variant: [],
                        arguments: [],
                        domain: None,
                        span: 1670..1681,
                    },
                ],
            },
            name: join,
            generics: [
                Parameter {
                    key: "T",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    annotations: Annotation {
                        modifiers: [
                            mut,
                        ],
                    },
                    bound: T,
                },
                Parameter {
                    key: "other",
                    bound: T,
                },
            ],
            returns: T,
            body: [
                Control {
                    kind: Return,
                    expression: ApplyCallNode {
                        monadic: false,
                        caller: DotCallNode {
                            monadic: false,
                            base: self,
                            term: append,
                            span: 1742..1749,
                        },
                        arguments: [
                            ArgumentTerm {
                                modifiers: [],
                                key: Nothing,
                                value: other,
                            },
                        ],
                        body: None,
                        span: 1749..1756,
                    },
                    span: 1731..1756,
                },
            ],
            span: 1669..1762,
        },
    ],
    span: 1384..1766,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("derive", 1767..1773),
                    ],
                    span: FileSpan {
                        start: 1767,
                        end: 1773,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 1767..1806,
            },
        ],
    },
    name: TestClass,
    span: 1766..1828,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    path: [
                        Identifier("derive", 1829..1835),
                    ],
                    span: FileSpan {
                        start: 1829,
                        end: 1835,
                        file: FileID(0x65BE032B5F19EADD),
                    },
                },
                variant: [],
                arguments: [],
                domain: None,
                span: 1829..1859,
            },
        ],
    },
    name: Class,
    terms: [
        Field {
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            path: [
                                Identifier("call", 1885..1889),
                            ],
                            span: FileSpan {
                                start: 1885,
                                end: 1889,
                                file: FileID(0x65BE032B5F19EADD),
                            },
                        },
                        variant: [],
                        arguments: [],
                        domain: None,
                        span: 1885..1894,
                    },
                ],
                modifiers: [
                    readonly,
                ],
            },
            name: field1,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    readonly,
                ],
            },
            name: field 2,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    class,
                    static,
                    void,
                ],
            },
            name: main,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    mut,
                ],
            },
            name: fields,
        },
        Method {
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            path: [
                                Identifier("call1", 2034..2039),
                            ],
                            span: FileSpan {
                                start: 2034,
                                end: 2039,
                                file: FileID(0x65BE032B5F19EADD),
                            },
                        },
                        variant: [],
                        arguments: [],
                        domain: None,
                        span: 2034..2044,
                    },
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            path: [
                                Identifier("call2", 2045..2050),
                            ],
                            span: FileSpan {
                                start: 2045,
                                end: 2050,
                                file: FileID(0x65BE032B5F19EADD),
                            },
                        },
                        variant: [],
                        arguments: [],
                        domain: None,
                        span: 2045..2055,
                    },
                ],
            },
            name: try_add,
            parameters: [
                Parameter {
                    key: "self",
                    annotations: Annotation {
                        modifiers: [
                            mut,
                        ],
                    },
                },
                Parameter {
                    key: "args",
                },
            ],
            body: [
                block,
            ],
            span: 2033..2108,
        },
    ],
    span: 1828..2112,
}

NamespaceDeclaration {
    kind: Standalone,
    path: declaration∷classes,
}
Class {
    name: Base1,
    span: 33..49,
}
Class {
    name: Base2,
    span: 49..67,
}
Structure {
    name: Base3,
    span: 67..89,
}
Class {
    annotations: Annotation {
        modifiers: [
            value,
        ],
    },
    name: B,
    span: 89..113,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 114..120),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: Inherit1,
    span: 113..219,
}
Class {
    name: Inherit2,
    terms: [
        Field {
            name: virtual,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: base1,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: base2,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: base3,
        },
    ],
    span: 219..329,
}
Class {
    name: B,
    terms: [
        Field {
            name: item1,
        },
        Field {
            name: item2,
        },
    ],
    span: 329..392,
}
Class {
    name: A,
    terms: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("a", 440..441),
                ],
            },
            annotations: Annotation {
                modifiers: [
                    pub,
                    static,
                ],
            },
            generics: [],
            parameters: [],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: InfixNode {
                        infix: +,
                        lhs: GenericCallNode {
                            monadic: false,
                            base: Ref,
                            term: ArgumentsList {
                                terms: [
                                    TupleTermNode {
                                        key: None,
                                        value: B,
                                    },
                                ],
                            },
                            span: 448..455,
                        },
                        rhs: Gc,
                    },
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: D,
                            },
                        ],
                    },
                    span: 460..463,
                },
            },
            body: Some(
                [
                    Control {
                        kind: Return,
                        expression: 1,
                        span: 474..482,
                    },
                ],
            ),
            span: 429..488,
        },
        Field {
            name: _a,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("a", 505..506),
                ],
            },
            annotations: Annotation {
                modifiers: [
                    get,
                ],
            },
            generics: [],
            parameters: [],
            returns: Auto,
            body: Some(
                [
                    ApplyCallNode {
                        monadic: false,
                        caller: violate,
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        body: None,
                        span: 526..567,
                    },
                    Control {
                        kind: Return,
                        expression: _a,
                        span: 576..585,
                    },
                ],
            ),
            span: 501..591,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("a", 600..601),
                ],
            },
            annotations: Annotation {
                modifiers: [
                    set,
                ],
            },
            generics: [],
            parameters: [],
            returns: Auto,
            body: Some(
                [
                    InfixNode {
                        infix: =,
                        lhs: _a,
                        rhs: value,
                    },
                ],
            ),
            span: 596..630,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("into", 635..639),
                ],
            },
            annotations: Empty,
            generics: [
                Parameter {
                    key: "bool",
                },
            ],
            parameters: [],
            returns: Auto,
            body: Some(
                [],
            ),
            span: 635..659,
        },
    ],
    span: 392..673,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("Copy", 675..679),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("Debug", 688..693),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 704..710),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: A,
    span: 673..753,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("Encode", 754..760),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("Decode", 762..768),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 771..777),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
        modifiers: [
            public,
            static,
            dynamic_transaction_safe,
            volatile,
            final,
        ],
    },
    name: Empty3,
    span: 753..883,
}
Class {
    annotations: Annotation {
        modifiers: [
            open,
            impart,
        ],
    },
    name: Inherit1,
    span: 883..950,
}
Class {
    annotations: Annotation {
        modifiers: [
            open,
            impart,
        ],
    },
    name: Inherit2,
    terms: [
        Field {
            annotations: Annotation {
                modifiers: [
                    public,
                ],
            },
            name: virtual,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: x_base,
        },
        Field {
            name: private,
        },
        Field {
            name: inline,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    inherit,
                ],
            },
            name: _y_base,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("constructor", 1077..1088),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [],
            returns: Auto,
            body: Some(
                [],
            ),
            span: 1077..1099,
        },
    ],
    span: 950..1103,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 1104..1110),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: 原神,
    terms: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("启动", 1200..1206),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: ReturnType {
                main: Unit,
            },
            body: Some(
                [
                    shell'F:\\Games\\Genshin Impact\\UnityCrashHandler64.exe',
                ],
            ),
            span: 1200..1289,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("value", 1298..1303),
                ],
            },
            annotations: Annotation {
                modifiers: [
                    get,
                ],
            },
            generics: [],
            parameters: [],
            returns: ReturnType {
                main: Integer,
            },
            body: Some(
                [
                    _integer,
                ],
            ),
            span: 1294..1339,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("value", 1348..1353),
                ],
            },
            annotations: Annotation {
                modifiers: [
                    set,
                ],
            },
            generics: [],
            parameters: [],
            returns: Auto,
            body: Some(
                [
                    _integer,
                ],
            ),
            span: 1344..1380,
        },
    ],
    span: 1103..1384,
}
Class {
    name: ClassA,
    terms: [
        Field {
            annotations: Annotation {
                modifiers: [
                    public,
                    static,
                ],
            },
            name: type,
        },
        Field {
            name: unknown_all,
        },
        Field {
            name: default_value,
        },
        Field {
            name: infer_type,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("property", 1512..1520),
                ],
            },
            annotations: Annotation {
                modifiers: [
                    get,
                ],
            },
            generics: [],
            parameters: [],
            returns: Auto,
            body: Some(
                [],
            ),
            span: 1508..1525,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("property", 1535..1543),
                ],
            },
            annotations: Annotation {
                modifiers: [
                    set,
                ],
            },
            generics: [],
            parameters: [],
            returns: Auto,
            body: Some(
                [],
            ),
            span: 1531..1548,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("method", 1554..1560),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [],
            returns: Auto,
            body: None,
            span: 1554..1562,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("/", 1591..1594),
                ],
            },
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            names: [
                                Identifier("decorator", 1571..1580),
                            ],
                        },
                        variant: [],
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        domain: None,
                    },
                ],
                modifiers: [
                    infix,
                ],
            },
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "rhs",
                    bound: Self,
                },
            ],
            returns: ReturnType {
                main: Self,
            },
            body: Some(
                [
                    Control {
                        kind: Return,
                        expression: InfixNode {
                            infix: /,
                            lhs: self,
                            rhs: rhs,
                        },
                        span: 1641..1658,
                    },
                ],
            ),
            span: 1570..1664,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("join", 1681..1685),
                ],
            },
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            names: [
                                Identifier("inline", 1670..1676),
                            ],
                        },
                        variant: [],
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        domain: None,
                    },
                ],
            },
            generics: [
                Parameter {
                    key: "T",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    annotations: Annotation {
                        modifiers: [
                            mut,
                        ],
                    },
                    bound: T,
                },
                Parameter {
                    key: "other",
                    bound: T,
                },
            ],
            returns: ReturnType {
                main: T,
            },
            body: Some(
                [
                    Control {
                        kind: Return,
                        expression: ApplyCallNode {
                            monadic: false,
                            caller: DotCallNode {
                                monadic: false,
                                base: self,
                                term: append,
                                span: 1742..1749,
                            },
                            arguments: ArgumentsList {
                                terms: [
                                    TupleTermNode {
                                        key: None,
                                        value: other,
                                    },
                                ],
                            },
                            body: None,
                            span: 1749..1756,
                        },
                        span: 1731..1756,
                    },
                ],
            ),
            span: 1669..1762,
        },
    ],
    span: 1384..1766,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 1767..1773),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: TestClass,
    span: 1766..1828,
}
Class {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("derive", 1829..1835),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: Class,
    terms: [
        Field {
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            names: [
                                Identifier("call", 1885..1889),
                            ],
                        },
                        variant: [],
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        domain: None,
                    },
                ],
                modifiers: [
                    readonly,
                ],
            },
            name: field1,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    readonly,
                ],
            },
            name: field 2,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    class,
                    static,
                    void,
                ],
            },
            name: main,
        },
        Field {
            annotations: Annotation {
                modifiers: [
                    mut,
                ],
            },
            name: fields,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("try_add", 2055..2062),
                ],
            },
            annotations: Annotation {
                attributes: [
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            names: [
                                Identifier("call1", 2034..2039),
                            ],
                        },
                        variant: [],
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        domain: None,
                    },
                    AttributeTerm {
                        kind: Normal,
                        path: NamePathNode {
                            names: [
                                Identifier("call2", 2045..2050),
                            ],
                        },
                        variant: [],
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        domain: None,
                    },
                ],
            },
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                    annotations: Annotation {
                        modifiers: [
                            mut,
                        ],
                    },
                },
                Parameter {
                    key: "args",
                },
            ],
            returns: Auto,
            body: Some(
                [
                    block,
                ],
            ),
            span: 2033..2108,
        },
    ],
    span: 1828..2112,
}

NamespaceDeclaration {
    kind: Standalone,
    path: std∷create∷test,
}
Union {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("tag", 101..104),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: Union1,
    body: [],
    span: 100..120,
}
Union {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("tag", 151..154),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: Union2,
    body: [
        Variant {
            name: Variant1,
        },
        Variant {
            name: Variant2,
        },
        Variant {
            name: Variant3,
            body: [
                Field {
                    name: field1,
                },
            ],
        },
    ],
    span: 150..242,
}
Union {
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("tag", 276..279),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    name: Union3,
    body: [
        Variant {
            name: Variant1,
        },
        Variant {
            name: Variant2,
        },
        Variant {
            name: Variant3,
            body: [
                Field {
                    name: field1,
                },
                Field {
                    name: field2,
                },
                Field {
                    name: field3,
                },
            ],
        },
    ],
    span: 275..402,
}
Union {
    name: Union4,
    body: [
        Variant {
            name: Variant1,
            body: [
                Field {
                    annotations: Annotation {
                        modifiers: [
                            public,
                            static,
                        ],
                    },
                    name: field_a,
                },
                MethodDeclaration {
                    name: NamePathNode {
                        names: [
                            Identifier("display", 493..500),
                        ],
                    },
                    annotations: Annotation {
                        modifiers: [
                            mut,
                            field_b,
                        ],
                    },
                    generics: [],
                    parameters: [
                        Parameter {
                            key: "self",
                        },
                    ],
                    returns: Auto,
                    body: Some(
                        [],
                    ),
                    span: 473..519,
                },
            ],
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("display", 531..538),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: Auto,
            body: None,
            span: 531..544,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("method", 550..556),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: Auto,
            body: Some(
                [
                    MatchStatement {
                        kind: Typing,
                        bind: None,
                        main: self,
                        patterns: [],
                        span: 572..595,
                    },
                ],
            ),
            span: 550..601,
        },
    ],
    span: 404..603,
}
Union {
    name: A,
    implements: InfixNode {
        infix: +,
        lhs: A,
        rhs: B,
    },
    body: [
        Variant {
            name: A,
        },
        Variant {
            name: Bb,
        },
        Variant {
            name: Ccc,
        },
    ],
    span: 630..683,
}
Union {
    name: Option,
    body: [
        Variant {
            name: Some,
            body: [
                Field {
                    name: value,
                },
            ],
        },
        Variant {
            name: None,
        },
    ],
    span: 704..820,
}
Union {
    name: Result,
    body: [
        Variant {
            name: Success,
            body: [
                Field {
                    name: value,
                },
            ],
        },
        Variant {
            name: Failure,
            body: [
                Field {
                    name: error,
                },
            ],
        },
    ],
    span: 822..939,
}
Union {
    name: Validation,
    body: [
        Variant {
            name: Fine,
            body: [
                Field {
                    name: value,
                },
                Field {
                    name: errors,
                },
            ],
        },
        Variant {
            name: Fail,
            body: [
                Field {
                    name: fatal,
                },
                Field {
                    name: errors,
                },
            ],
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("as_result", 1102..1111),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: Result,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: T,
                            },
                            TupleTermNode {
                                key: None,
                                value: E,
                            },
                        ],
                    },
                    span: 1125..1135,
                },
            },
            body: Some(
                [
                    MatchStatement {
                        kind: Typing,
                        bind: None,
                        main: self,
                        patterns: [
                            PatternBranch {
                                condition: PatternCaseNode {
                                    pattern: TuplePatternNode {
                                        bind: None,
                                        name: None,
                                        terms: [
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("value", 1183..1188),
                                            },
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("", 0..0),
                                            },
                                        ],
                                        span: 0..0,
                                    },
                                    guard: None,
                                    span: 1171..1240,
                                },
                                continuation: [
                                    ApplyCallNode {
                                        monadic: false,
                                        caller: Success,
                                        arguments: ArgumentsList {
                                            terms: [
                                                TupleTermNode {
                                                    key: None,
                                                    value: value,
                                                },
                                            ],
                                        },
                                        body: None,
                                        span: 1220..1227,
                                    },
                                ],
                                span: 1171..1240,
                            },
                            PatternBranch {
                                condition: PatternCaseNode {
                                    pattern: TuplePatternNode {
                                        bind: None,
                                        name: None,
                                        terms: [
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("fatal", 1252..1257),
                                            },
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("", 0..0),
                                            },
                                        ],
                                        span: 0..0,
                                    },
                                    guard: None,
                                    span: 1240..1305,
                                },
                                continuation: [
                                    ApplyCallNode {
                                        monadic: false,
                                        caller: Failure,
                                        arguments: ArgumentsList {
                                            terms: [
                                                TupleTermNode {
                                                    key: None,
                                                    value: fatal,
                                                },
                                            ],
                                        },
                                        body: None,
                                        span: 1289..1296,
                                    },
                                ],
                                span: 1240..1305,
                            },
                        ],
                        span: 1146..1306,
                    },
                ],
            ),
            span: 1102..1312,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("as_option", 1317..1326),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: Option,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: T,
                            },
                        ],
                    },
                    span: 1340..1347,
                },
            },
            body: Some(
                [
                    MatchStatement {
                        kind: Typing,
                        bind: None,
                        main: self,
                        patterns: [
                            PatternBranch {
                                condition: PatternCaseNode {
                                    pattern: TuplePatternNode {
                                        bind: None,
                                        name: None,
                                        terms: [
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("value", 1395..1400),
                                            },
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("", 0..0),
                                            },
                                        ],
                                        span: 0..0,
                                    },
                                    guard: None,
                                    span: 1383..1449,
                                },
                                continuation: [
                                    ApplyCallNode {
                                        monadic: false,
                                        caller: Some,
                                        arguments: ArgumentsList {
                                            terms: [
                                                TupleTermNode {
                                                    key: None,
                                                    value: value,
                                                },
                                            ],
                                        },
                                        body: None,
                                        span: 1429..1436,
                                    },
                                ],
                                span: 1383..1449,
                            },
                            PatternBranch {
                                condition: PatternCaseNode {
                                    pattern: TuplePatternNode {
                                        bind: None,
                                        name: None,
                                        terms: [
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("fatal", 1461..1466),
                                            },
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("", 0..0),
                                            },
                                        ],
                                        span: 0..0,
                                    },
                                    guard: None,
                                    span: 1449..1504,
                                },
                                continuation: [
                                    None,
                                ],
                                span: 1449..1504,
                            },
                        ],
                        span: 1358..1505,
                    },
                ],
            ),
            span: 1317..1511,
        },
    ],
    span: 941..1513,
}
ExtendsStatement {
    implements: None,
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("is_fine", 1563..1570),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: ReturnType {
                main: bool,
            },
            body: Some(
                [
                    ProceduralNode {
                        kind: Normal,
                        path: NamePathNode {
                            names: [
                                Identifier("matches", 1594..1601),
                            ],
                        },
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        domain: None,
                        span: 1593..1625,
                    },
                ],
            ),
            span: 1563..1626,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("is_fail", 1631..1638),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
            ],
            returns: ReturnType {
                main: bool,
            },
            body: Some(
                [
                    ProceduralNode {
                        kind: Normal,
                        path: NamePathNode {
                            names: [
                                Identifier("matches", 1662..1669),
                            ],
                        },
                        arguments: ArgumentsList {
                            terms: [],
                        },
                        domain: None,
                        span: 1661..1693,
                    },
                ],
            ),
            span: 1631..1694,
        },
    ],
}

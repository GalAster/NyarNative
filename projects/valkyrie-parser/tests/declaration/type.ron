ExpressionNode {
    omit: false,
    body: type,
    span: 0..5,
}
ExpressionNode {
    omit: true,
    body: GenericCallNode {
        monadic: false,
        base: InfixNode {
            infix: =,
            lhs: GenericCallNode {
                monadic: false,
                base: Result,
                terms: ArgumentsList {
                    terms: [
                        TupleTermNode {
                            key: None,
                            value: T,
                        },
                    ],
                },
                associated: [],
                span: 11..19,
            },
            rhs: std∷result∷Result,
        },
        terms: ArgumentsList {
            terms: [
                TupleTermNode {
                    key: None,
                    value: T,
                },
                TupleTermNode {
                    key: None,
                    value: Error,
                },
            ],
        },
        associated: [],
        span: 40..54,
    },
    span: 5..55,
}
ExpressionNode {
    omit: false,
    body: type,
    span: 59..64,
}
ExpressionNode {
    omit: false,
    body: ApplyCallNode {
        monadic: false,
        caller: GenericCallNode {
            monadic: false,
            base: List,
            terms: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: UnaryNode {
                            prefix: +,
                            base: T,
                        },
                    },
                    TupleTermNode {
                        key: None,
                        value: UnaryNode {
                            prefix: -,
                            base: A,
                        },
                    },
                ],
            },
            associated: [],
            span: 68..81,
        },
        arguments: ArgumentsList {
            terms: [],
        },
        body: None,
        span: 81..85,
    },
    span: 64..88,
}
ExpressionNode {
    omit: false,
    body: alias,
    span: 88..94,
}
ExpressionNode {
    omit: true,
    body: InfixNode {
        infix: =,
        lhs: InfixNode {
            infix: ∈,
            lhs: type,
            rhs: t,
        },
        rhs: Integer,
    },
    span: 94..113,
}
ClassDeclaration {
    name: Identifier("Integer", 121..128),
    kind: Class,
    annotations: Empty,
    generic: None,
    base_classes: None,
    auto_traits: [],
    terms: [
        DomainDeclaration {
            body: [
                MethodDeclaration {
                    name: NamePathNode {
                        names: [
                            Identifier("requires", 165..173),
                        ],
                    },
                    annotations: Empty,
                    generic: None,
                    arguments: ArgumentsList {
                        terms: [],
                    },
                    returns: Auto,
                    body: Some(
                        StatementBlock {
                            terms: [
                                ExpressionNode {
                                    omit: true,
                                    body: InfixNode {
                                        infix: >,
                                        lhs: Self,
                                        rhs: 0,
                                    },
                                    span: 190..199,
                                },
                            ],
                            span: 176..209,
                        },
                    ),
                    span: 165..209,
                },
                MethodDeclaration {
                    name: NamePathNode {
                        names: [
                            Identifier("ensures", 218..225),
                        ],
                    },
                    annotations: Empty,
                    generic: None,
                    arguments: ArgumentsList {
                        terms: [],
                    },
                    returns: Auto,
                    body: Some(
                        StatementBlock {
                            terms: [],
                            span: 228..240,
                        },
                    ),
                    span: 218..240,
                },
            ],
            span: 148..246,
        },
    ],
    span: 115..251,
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("five", 260..264),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generic: None,
    arguments: ArgumentsList {
        terms: [],
    },
    returns: ReturnType {
        main: i32,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: 5,
                span: 278..280,
            },
        ],
        span: 272..281,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("tuple", 348..353),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        attributes: AttributeList {
            terms: [
                AttributeTerm {
                    kind: Normal,
                    path: NamePathNode {
                        names: [
                            Identifier("ensures", 285..292),
                        ],
                    },
                    variant: [],
                    arguments: ArgumentsList {
                        terms: [],
                    },
                    domain: None,
                },
            ],
        },
    },
    generic: None,
    arguments: ArgumentsList {
        terms: [],
    },
    returns: ReturnType {
        main: TupleNode {
            kind: Tuple,
            terms: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: i32,
                    },
                    TupleTermNode {
                        key: None,
                        value: i32,
                    },
                    TupleTermNode {
                        key: None,
                        value: char,
                    },
                ],
            },
            span: 357..373,
        },
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: TupleNode {
                    kind: Tuple,
                    terms: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: 10,
                            },
                            TupleTermNode {
                                key: None,
                                value: 5,
                            },
                            TupleTermNode {
                                key: None,
                                value: 'a',
                            },
                        ],
                    },
                    span: 380..392,
                },
                span: 380..393,
            },
        ],
        span: 374..394,
    },
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("all_zeroes", 416..426),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            Identifier("predicate", 397..406),
        ],
    },
    generic: None,
    arguments: ArgumentsList {
        terms: [],
    },
    returns: ReturnType {
        main: bool,
    },
    body: StatementBlock {
        terms: [
            ExpressionNode {
                omit: false,
                body: ApplyCallNode {
                    monadic: false,
                    caller: forall,
                    arguments: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: LambdaNode {
                                    annotations: Empty,
                                    generic: None,
                                    parameters: ParametersList {
                                        kind: Expression,
                                        terms: [
                                            Single {
                                                annotations: Empty,
                                                key: Identifier("i", 468..469),
                                                bound: Some(
                                                    usize,
                                                ),
                                                default: None,
                                            },
                                        ],
                                    },
                                    returns: Auto,
                                    body: StatementBlock {
                                        terms: [
                                            ExpressionNode {
                                                omit: false,
                                                body: InfixNode {
                                                    infix: ==,
                                                    lhs: ApplyCallNode {
                                                        monadic: false,
                                                        caller: DotCallNode {
                                                            monadic: false,
                                                            base: InfixNode {
                                                                infix: ∧,
                                                                lhs: ApplyCallNode {
                                                                    monadic: false,
                                                                    caller: DotCallNode {
                                                                        monadic: false,
                                                                        base: InfixNode {
                                                                            infix: ∧,
                                                                            lhs: InfixNode {
                                                                                infix: ⩽,
                                                                                lhs: 0,
                                                                                rhs: i,
                                                                            },
                                                                            rhs: InfixNode {
                                                                                infix: <,
                                                                                lhs: i,
                                                                                rhs: a,
                                                                            },
                                                                        },
                                                                        term: len,
                                                                        span: 503..507,
                                                                    },
                                                                    arguments: ArgumentsList {
                                                                        terms: [],
                                                                    },
                                                                    body: None,
                                                                    span: 507..509,
                                                                },
                                                                rhs: a,
                                                            },
                                                            term: lookup,
                                                            span: 514..521,
                                                        },
                                                        arguments: ArgumentsList {
                                                            terms: [
                                                                TupleTermNode {
                                                                    key: None,
                                                                    value: i,
                                                                },
                                                            ],
                                                        },
                                                        body: None,
                                                        span: 521..524,
                                                    },
                                                    rhs: 0,
                                                },
                                                span: 488..534,
                                            },
                                        ],
                                        span: 478..535,
                                    },
                                    span: 461..535,
                                },
                            },
                        ],
                    },
                    body: None,
                    span: 460..536,
                },
                span: 454..537,
            },
        ],
        span: 448..538,
    },
}

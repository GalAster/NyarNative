type
GenericCallNode {
    monadic: false,
    base: InfixNode {
        infix: =,
        lhs: GenericCallNode {
            monadic: false,
            base: Result,
            term: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: T,
                    },
                ],
            },
            span: 11..19,
        },
        rhs: std∷result∷Result,
    },
    term: ArgumentsList {
        terms: [
            TupleTermNode {
                key: None,
                value: T,
            },
            TupleTermNode {
                key: None,
                value: Error,
            },
        ],
    },
    span: 40..54,
}
type
ApplyCallNode {
    monadic: false,
    caller: GenericCallNode {
        monadic: false,
        base: List,
        term: ArgumentsList {
            terms: [
                TupleTermNode {
                    key: None,
                    value: UnaryNode {
                        prefix: +,
                        base: T,
                    },
                },
                TupleTermNode {
                    key: None,
                    value: UnaryNode {
                        prefix: -,
                        base: A,
                    },
                },
            ],
        },
        span: 68..81,
    },
    arguments: ArgumentsList {
        terms: [],
    },
    body: None,
    span: 81..85,
}
alias
InfixNode {
    infix: =,
    lhs: InfixNode {
        infix: ∈,
        lhs: type,
        rhs: t,
    },
    rhs: Integer,
}
Class {
    name: Integer,
    terms: [
        DomainDeclaration {
            body: [
                MethodDeclaration {
                    name: NamePathNode {
                        names: [
                            Identifier("requires", 165..173),
                        ],
                    },
                    annotations: Empty,
                    generics: [],
                    parameters: [],
                    returns: Auto,
                    body: Some(
                        [
                            InfixNode {
                                infix: >,
                                lhs: Self,
                                rhs: 0,
                            },
                        ],
                    ),
                    span: 165..209,
                },
                MethodDeclaration {
                    name: NamePathNode {
                        names: [
                            Identifier("ensures", 218..225),
                        ],
                    },
                    annotations: Empty,
                    generics: [],
                    parameters: [],
                    returns: Auto,
                    body: Some(
                        [],
                    ),
                    span: 218..240,
                },
            ],
            span: 148..246,
        },
    ],
    span: 115..251,
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("five", 260..264),
        ],
    },
    kind: Micro,
    annotations: Empty,
    generics: [],
    parameters: [],
    returns: ReturnType {
        main: i32,
    },
    body: [
        5,
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("tuple", 348..353),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        attributes: [
            AttributeTerm {
                kind: Normal,
                path: NamePathNode {
                    names: [
                        Identifier("ensures", 285..292),
                    ],
                },
                variant: [],
                arguments: ArgumentsList {
                    terms: [],
                },
                domain: None,
            },
        ],
    },
    generics: [],
    parameters: [],
    returns: ReturnType {
        main: TupleNode {
            kind: Tuple,
            terms: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: i32,
                    },
                    TupleTermNode {
                        key: None,
                        value: i32,
                    },
                    TupleTermNode {
                        key: None,
                        value: char,
                    },
                ],
            },
            span: 357..373,
        },
    },
    body: [
        TupleNode {
            kind: Tuple,
            terms: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: 10,
                    },
                    TupleTermNode {
                        key: None,
                        value: 5,
                    },
                    TupleTermNode {
                        key: None,
                        value: 'a',
                    },
                ],
            },
            span: 380..392,
        },
    ],
}
FunctionDeclaration {
    name: NamePathNode {
        names: [
            Identifier("all_zeroes", 416..426),
        ],
    },
    kind: Micro,
    annotations: Annotation {
        modifiers: [
            predicate,
        ],
    },
    generics: [],
    parameters: [
        Parameter {
            key: "a",
            bound: UnaryNode {
                prefix: &,
                base: MyArray,
            },
        },
    ],
    returns: ReturnType {
        main: bool,
    },
    body: [
        ApplyCallNode {
            monadic: false,
            caller: forall,
            arguments: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: LambdaNode {
                            annotations: Empty,
                            generics: [],
                            parameters: [
                                Parameter {
                                    key: "i",
                                    bound: usize,
                                },
                            ],
                            returns: Auto,
                            body: [
                                InfixNode {
                                    infix: ==,
                                    lhs: ApplyCallNode {
                                        monadic: false,
                                        caller: DotCallNode {
                                            monadic: false,
                                            base: InfixNode {
                                                infix: ∧,
                                                lhs: ApplyCallNode {
                                                    monadic: false,
                                                    caller: DotCallNode {
                                                        monadic: false,
                                                        base: InfixNode {
                                                            infix: ∧,
                                                            lhs: InfixNode {
                                                                infix: ⩽,
                                                                lhs: 0,
                                                                rhs: i,
                                                            },
                                                            rhs: InfixNode {
                                                                infix: <,
                                                                lhs: i,
                                                                rhs: a,
                                                            },
                                                        },
                                                        term: len,
                                                        span: 503..507,
                                                    },
                                                    arguments: ArgumentsList {
                                                        terms: [],
                                                    },
                                                    body: None,
                                                    span: 507..509,
                                                },
                                                rhs: a,
                                            },
                                            term: lookup,
                                            span: 514..521,
                                        },
                                        arguments: ArgumentsList {
                                            terms: [
                                                TupleTermNode {
                                                    key: None,
                                                    value: i,
                                                },
                                            ],
                                        },
                                        body: None,
                                        span: 521..524,
                                    },
                                    rhs: 0,
                                },
                            ],
                            span: 461..535,
                        },
                    },
                ],
            },
            body: None,
            span: 460..536,
        },
    ],
}

Trait {
    name: Identifier("A", 6..7),
    implements: InfixNode {
        infix: +,
        lhs: Trait,
        rhs: Trait,
    },
    body: [],
}
Trait {
    name: Identifier("SemiGroup", 39..48),
    generics: [
        Parameter {
            key: "T",
        },
    ],
    body: [
        Method {
            name: combine,
            parameters: [
                Parameter {
                    key: "y",
                    bound: T,
                },
            ],
            returns: T,
            span: 62..80,
        },
    ],
}
Trait {
    name: Identifier("Monoid", 89..95),
    generics: [
        Parameter {
            key: "T",
        },
    ],
    implements: GenericCallNode {
        monadic: false,
        base: SemiGroup,
        term: [
            ArgumentTerm {
                key: Nothing,
                value: T,
            },
        ],
        span: 113..120,
    },
    body: [
        Field {
            name: unit,
            type: T,
        },
    ],
}
Trait {
    name: Identifier("SemiGroup", 143..152),
    body: [
        Method {
            name: combine,
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "rhs",
                    bound: Self,
                },
            ],
            returns: Self,
            span: 159..190,
        },
    ],
}
Trait {
    name: Identifier("Functor", 199..206),
    generics: [
        Parameter {
            key: "F",
        },
    ],
    body: [
        Method {
            name: map,
            parameters: [
                Parameter {
                    key: "a",
                    bound: GenericCallNode {
                        monadic: false,
                        base: F,
                        term: [
                            ArgumentTerm {
                                key: Nothing,
                                value: A,
                            },
                        ],
                        span: 228..235,
                    },
                },
                Parameter {
                    key: "f",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Function,
                        term: [
                            ArgumentTerm {
                                key: Nothing,
                                value: A,
                            },
                            ArgumentTerm {
                                key: Nothing,
                                value: B,
                            },
                        ],
                        span: 248..258,
                    },
                },
            ],
            returns: GenericCallNode {
                monadic: false,
                base: F,
                term: [
                    ArgumentTerm {
                        key: Nothing,
                        value: B,
                    },
                ],
                span: 264..271,
            },
            span: 220..272,
        },
    ],
}
Trait {
    name: Identifier("Monoid", 281..287),
    implements: InfixNode {
        infix: +,
        lhs: SemiGroup,
        rhs: Default,
    },
    body: [
        Method {
            name: empty,
            returns: Self,
            span: 315..329,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        GenericCallNode {
            monadic: false,
            base: Monoid,
            term: [
                ArgumentTerm {
                    key: Nothing,
                    value: String,
                },
            ],
            span: 354..366,
        },
    ),
    body: [
        Method {
            name: combine,
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "y",
                    bound: Self,
                },
            ],
            body: [
                ApplyCallNode {
                    monadic: false,
                    caller: DotCallNode {
                        monadic: false,
                        base: self,
                        term: concat,
                        span: 401..408,
                    },
                    arguments: [
                        ArgumentTerm {
                            key: Nothing,
                            value: y,
                        },
                    ],
                    body: None,
                    span: 408..411,
                },
            ],
            span: 373..412,
        },
        Method {
            name: unit,
            body: [
                '',
            ],
            span: 417..428,
        },
    ],
}
Trait {
    name: Identifier("Functor", 439..446),
    body: [
        Method {
            name: flat_map,
            generics: [
                Parameter {
                    key: "A",
                },
                Parameter {
                    key: "B",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Functor,
                        term: [
                            ArgumentTerm {
                                key: Nothing,
                                value: A,
                            },
                        ],
                        span: 485..492,
                    },
                },
                Parameter {
                    key: "f",
                    bound: InfixNode {
                        infix: +,
                        lhs: A,
                        rhs: B,
                    },
                },
            ],
            returns: GenericCallNode {
                monadic: false,
                base: Functor,
                term: [
                    ArgumentTerm {
                        key: Nothing,
                        value: B,
                    },
                ],
                span: 515..522,
            },
            span: 453..522,
        },
    ],
}
Trait {
    name: Identifier("Functor", 533..540),
    body: [
        Method {
            name: flat_map,
            generics: [
                Parameter {
                    key: "A",
                },
                Parameter {
                    key: "B",
                },
                Parameter {
                    key: "F",
                    bound: InfixNode {
                        infix: +,
                        lhs: GenericCallNode {
                            monadic: false,
                            base: Mutable,
                            term: [
                                ArgumentTerm {
                                    key: Nothing,
                                    value: A,
                                },
                            ],
                            span: 574..581,
                        },
                        rhs: B,
                    },
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Self,
                        term: [
                            ArgumentTerm {
                                key: Nothing,
                                value: A,
                            },
                        ],
                        span: 600..607,
                    },
                },
                Parameter {
                    key: "f",
                    bound: F,
                },
            ],
            returns: GenericCallNode {
                monadic: false,
                base: Self,
                term: [
                    ArgumentTerm {
                        key: Nothing,
                        value: B,
                    },
                ],
                span: 622..629,
            },
            span: 547..629,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        Functor,
    ),
    body: [
        Method {
            name: map,
            generics: [
                Parameter {
                    key: "A",
                },
                Parameter {
                    key: "B",
                },
                Parameter {
                    key: "F",
                    bound: InfixNode {
                        infix: +,
                        lhs: FnMut,
                        rhs: B,
                    },
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Option,
                        term: [
                            ArgumentTerm {
                                key: Nothing,
                                value: A,
                            },
                        ],
                        span: 705..712,
                    },
                },
                Parameter {
                    key: "f",
                    bound: F,
                },
            ],
            returns: GenericCallNode {
                monadic: false,
                base: Option,
                term: [
                    ArgumentTerm {
                        key: Nothing,
                        value: B,
                    },
                ],
                span: 729..736,
            },
            body: [
                MatchStatement {
                    kind: Typing,
                    bind: None,
                    main: self,
                    patterns: [
                        PatternBranch {
                            condition: PatternCaseNode {
                                pattern: TuplePatternNode {
                                    bind: None,
                                    name: None,
                                    terms: [
                                        IdentifierPattern {
                                            modifiers: [],
                                            identifier: Identifier("a", 782..783),
                                        },
                                    ],
                                    span: 0..0,
                                },
                                guard: None,
                                span: 772..797,
                            },
                            continuation: [
                                ApplyCallNode {
                                    monadic: false,
                                    caller: Some,
                                    arguments: [
                                        ArgumentTerm {
                                            key: Nothing,
                                            value: ApplyCallNode {
                                                monadic: false,
                                                caller: f,
                                                arguments: [
                                                    ArgumentTerm {
                                                        key: Nothing,
                                                        value: a,
                                                    },
                                                ],
                                                body: None,
                                                span: 793..796,
                                            },
                                        },
                                    ],
                                    body: None,
                                    span: 791..797,
                                },
                            ],
                            span: 772..797,
                        },
                        PatternBranch {
                            condition: PatternCaseNode {
                                pattern: IdentifierPattern {
                                    modifiers: [],
                                    identifier: Identifier("", 0..0),
                                },
                                guard: None,
                                span: 811..821,
                            },
                            continuation: [],
                            span: 811..821,
                        },
                    ],
                    span: 747..832,
                },
            ],
            span: 664..838,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        Functor,
    ),
    body: [
        Method {
            name: fmap,
            generics: [
                Parameter {
                    key: "B",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "f",
                    bound: InfixNode {
                        infix: +,
                        lhs: A,
                        rhs: B,
                    },
                },
            ],
            returns: GenericCallNode {
                monadic: false,
                base: Array,
                term: [
                    ArgumentTerm {
                        key: Nothing,
                        value: B,
                    },
                ],
                span: 929..936,
            },
            body: [
                Control {
                    kind: Return,
                    expression: ApplyCallNode {
                        monadic: false,
                        caller: map,
                        arguments: [
                            ArgumentTerm {
                                key: Nothing,
                                value: f,
                            },
                            ArgumentTerm {
                                key: Nothing,
                                value: self,
                            },
                        ],
                        body: None,
                        span: 957..966,
                    },
                    span: 947..966,
                },
            ],
            span: 892..972,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        GenericCallNode {
            monadic: false,
            base: Functor,
            term: [
                ArgumentTerm {
                    key: Nothing,
                    value: A,
                },
            ],
            span: 1020..1027,
        },
    ),
    body: [
        Method {
            name: fmap,
            generics: [
                Parameter {
                    key: "B",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "f",
                    bound: InfixNode {
                        infix: +,
                        lhs: A,
                        rhs: B,
                    },
                },
            ],
            returns: GenericCallNode {
                monadic: false,
                base: Array,
                term: [
                    ArgumentTerm {
                        key: Nothing,
                        value: B,
                    },
                ],
                span: 1091..1098,
            },
            body: [
                Control {
                    kind: Return,
                    expression: ApplyCallNode {
                        monadic: false,
                        caller: map,
                        arguments: [
                            ArgumentTerm {
                                key: Nothing,
                                value: f,
                            },
                            ArgumentTerm {
                                key: Nothing,
                                value: self,
                            },
                        ],
                        body: None,
                        span: 1119..1128,
                    },
                    span: 1109..1128,
                },
            ],
            span: 1054..1134,
        },
    ],
}

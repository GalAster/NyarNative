Trait {
    name: Identifier("A", 6..7),
    implements: InfixNode {
        infix: +,
        lhs: Trait,
        rhs: Trait,
    },
    body: [],
}
Trait {
    name: Identifier("SemiGroup", 39..48),
    generics: [
        Parameter {
            key: "T",
        },
    ],
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("combine", 62..69),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "y",
                    bound: T,
                },
            ],
            returns: ReturnType {
                main: T,
            },
            body: None,
            span: 62..80,
        },
    ],
}
Trait {
    name: Identifier("Monoid", 89..95),
    generics: [
        Parameter {
            key: "T",
        },
    ],
    implements: GenericCallNode {
        monadic: false,
        base: SemiGroup,
        term: ArgumentsList {
            terms: [
                TupleTermNode {
                    key: None,
                    value: T,
                },
            ],
        },
        span: 113..120,
    },
    body: [
        Field {
            name: unit,
        },
    ],
}
Trait {
    name: Identifier("SemiGroup", 143..152),
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("combine", 159..166),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "rhs",
                    bound: Self,
                },
            ],
            returns: ReturnType {
                main: Self,
            },
            body: None,
            span: 159..190,
        },
    ],
}
Trait {
    name: Identifier("Functor", 199..206),
    generics: [
        Parameter {
            key: "F",
        },
    ],
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("map", 220..223),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "a",
                    bound: GenericCallNode {
                        monadic: false,
                        base: F,
                        term: ArgumentsList {
                            terms: [
                                TupleTermNode {
                                    key: None,
                                    value: A,
                                },
                            ],
                        },
                        span: 228..235,
                    },
                },
                Parameter {
                    key: "f",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Function,
                        term: ArgumentsList {
                            terms: [
                                TupleTermNode {
                                    key: None,
                                    value: A,
                                },
                                TupleTermNode {
                                    key: None,
                                    value: B,
                                },
                            ],
                        },
                        span: 248..258,
                    },
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: F,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: B,
                            },
                        ],
                    },
                    span: 264..271,
                },
            },
            body: None,
            span: 220..272,
        },
    ],
}
Trait {
    name: Identifier("Monoid", 281..287),
    implements: InfixNode {
        infix: +,
        lhs: SemiGroup,
        rhs: Default,
    },
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("empty", 315..320),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [],
            returns: ReturnType {
                main: Self,
            },
            body: None,
            span: 315..329,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        GenericCallNode {
            monadic: false,
            base: Monoid,
            term: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: String,
                    },
                ],
            },
            span: 354..366,
        },
    ),
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("combine", 373..380),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "y",
                    bound: Self,
                },
            ],
            returns: Auto,
            body: Some(
                [
                    ApplyCallNode {
                        monadic: false,
                        caller: DotCallNode {
                            monadic: false,
                            base: self,
                            term: concat,
                            span: 401..408,
                        },
                        arguments: ArgumentsList {
                            terms: [
                                TupleTermNode {
                                    key: None,
                                    value: y,
                                },
                            ],
                        },
                        body: None,
                        span: 408..411,
                    },
                ],
            ),
            span: 373..412,
        },
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("unit", 417..421),
                ],
            },
            annotations: Empty,
            generics: [],
            parameters: [],
            returns: Auto,
            body: Some(
                [
                    '',
                ],
            ),
            span: 417..428,
        },
    ],
}
Trait {
    name: Identifier("Functor", 439..446),
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("flat_map", 453..461),
                ],
            },
            annotations: Empty,
            generics: [
                Parameter {
                    key: "A",
                },
                Parameter {
                    key: "B",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Functor,
                        term: ArgumentsList {
                            terms: [
                                TupleTermNode {
                                    key: None,
                                    value: A,
                                },
                            ],
                        },
                        span: 485..492,
                    },
                },
                Parameter {
                    key: "f",
                    bound: InfixNode {
                        infix: +,
                        lhs: A,
                        rhs: B,
                    },
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: Functor,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: B,
                            },
                        ],
                    },
                    span: 515..522,
                },
            },
            body: None,
            span: 453..522,
        },
    ],
}
Trait {
    name: Identifier("Functor", 533..540),
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("flat_map", 547..555),
                ],
            },
            annotations: Empty,
            generics: [
                Parameter {
                    key: "A",
                },
                Parameter {
                    key: "B",
                },
                Parameter {
                    key: "F",
                    bound: InfixNode {
                        infix: +,
                        lhs: GenericCallNode {
                            monadic: false,
                            base: Mutable,
                            term: ArgumentsList {
                                terms: [
                                    TupleTermNode {
                                        key: None,
                                        value: A,
                                    },
                                ],
                            },
                            span: 574..581,
                        },
                        rhs: B,
                    },
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Self,
                        term: ArgumentsList {
                            terms: [
                                TupleTermNode {
                                    key: None,
                                    value: A,
                                },
                            ],
                        },
                        span: 600..607,
                    },
                },
                Parameter {
                    key: "f",
                    bound: F,
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: Self,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: B,
                            },
                        ],
                    },
                    span: 622..629,
                },
            },
            body: None,
            span: 547..629,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        Functor,
    ),
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("map", 664..667),
                ],
            },
            annotations: Empty,
            generics: [
                Parameter {
                    key: "A",
                },
                Parameter {
                    key: "B",
                },
                Parameter {
                    key: "F",
                    bound: InfixNode {
                        infix: +,
                        lhs: FnMut,
                        rhs: B,
                    },
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                    bound: GenericCallNode {
                        monadic: false,
                        base: Option,
                        term: ArgumentsList {
                            terms: [
                                TupleTermNode {
                                    key: None,
                                    value: A,
                                },
                            ],
                        },
                        span: 705..712,
                    },
                },
                Parameter {
                    key: "f",
                    bound: F,
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: Option,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: B,
                            },
                        ],
                    },
                    span: 729..736,
                },
            },
            body: Some(
                [
                    MatchStatement {
                        kind: Typing,
                        bind: None,
                        main: self,
                        patterns: [
                            PatternBranch {
                                condition: PatternCaseNode {
                                    pattern: TuplePatternNode {
                                        bind: None,
                                        name: None,
                                        terms: [
                                            IdentifierPattern {
                                                modifiers: [],
                                                identifier: Identifier("a", 782..783),
                                            },
                                        ],
                                        span: 0..0,
                                    },
                                    guard: None,
                                    span: 772..797,
                                },
                                continuation: [
                                    ApplyCallNode {
                                        monadic: false,
                                        caller: Some,
                                        arguments: ArgumentsList {
                                            terms: [
                                                TupleTermNode {
                                                    key: None,
                                                    value: ApplyCallNode {
                                                        monadic: false,
                                                        caller: f,
                                                        arguments: ArgumentsList {
                                                            terms: [
                                                                TupleTermNode {
                                                                    key: None,
                                                                    value: a,
                                                                },
                                                            ],
                                                        },
                                                        body: None,
                                                        span: 793..796,
                                                    },
                                                },
                                            ],
                                        },
                                        body: None,
                                        span: 791..797,
                                    },
                                ],
                                span: 772..797,
                            },
                            PatternBranch {
                                condition: PatternCaseNode {
                                    pattern: IdentifierPattern {
                                        modifiers: [],
                                        identifier: Identifier("", 0..0),
                                    },
                                    guard: None,
                                    span: 811..821,
                                },
                                continuation: [],
                                span: 811..821,
                            },
                        ],
                        span: 747..832,
                    },
                ],
            ),
            span: 664..838,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        Functor,
    ),
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("fmap", 892..896),
                ],
            },
            annotations: Empty,
            generics: [
                Parameter {
                    key: "B",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "f",
                    bound: InfixNode {
                        infix: +,
                        lhs: A,
                        rhs: B,
                    },
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: Array,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: B,
                            },
                        ],
                    },
                    span: 929..936,
                },
            },
            body: Some(
                [
                    Control {
                        kind: Return,
                        expression: ApplyCallNode {
                            monadic: false,
                            caller: map,
                            arguments: ArgumentsList {
                                terms: [
                                    TupleTermNode {
                                        key: None,
                                        value: f,
                                    },
                                    TupleTermNode {
                                        key: None,
                                        value: self,
                                    },
                                ],
                            },
                            body: None,
                            span: 957..966,
                        },
                        span: 947..966,
                    },
                ],
            ),
            span: 892..972,
        },
    ],
}
ExtendsStatement {
    implements: Some(
        GenericCallNode {
            monadic: false,
            base: Functor,
            term: ArgumentsList {
                terms: [
                    TupleTermNode {
                        key: None,
                        value: A,
                    },
                ],
            },
            span: 1020..1027,
        },
    ),
    body: [
        MethodDeclaration {
            name: NamePathNode {
                names: [
                    Identifier("fmap", 1054..1058),
                ],
            },
            annotations: Empty,
            generics: [
                Parameter {
                    key: "B",
                },
            ],
            parameters: [
                Parameter {
                    key: "self",
                },
                Parameter {
                    key: "f",
                    bound: InfixNode {
                        infix: +,
                        lhs: A,
                        rhs: B,
                    },
                },
            ],
            returns: ReturnType {
                main: GenericCallNode {
                    monadic: false,
                    base: Array,
                    term: ArgumentsList {
                        terms: [
                            TupleTermNode {
                                key: None,
                                value: B,
                            },
                        ],
                    },
                    span: 1091..1098,
                },
            },
            body: Some(
                [
                    Control {
                        kind: Return,
                        expression: ApplyCallNode {
                            monadic: false,
                            caller: map,
                            arguments: ArgumentsList {
                                terms: [
                                    TupleTermNode {
                                        key: None,
                                        value: f,
                                    },
                                    TupleTermNode {
                                        key: None,
                                        value: self,
                                    },
                                ],
                            },
                            body: None,
                            span: 1119..1128,
                        },
                        span: 1109..1128,
                    },
                ],
            ),
            span: 1054..1134,
        },
    ],
}

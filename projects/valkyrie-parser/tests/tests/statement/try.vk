try _ {

}

try () {

}
catch {

}

try Option⟨T⟩ {

}

trait Biased {
    biased(self): bool;
}

template T {}
extends Option⟨T⟩: Biased {
    biased(self) {
        @matches(self, Some(_))
    }
}
template T {}
extends Result⟨T⟩: Biased {
    biased(self) {
        @matches(self, Success(_))
    }
}

function fibonacci() -> Iterator⟨Integer⟩ {
    let mut a = 0;
    let mut b = 1;
    while true {
        yield b
        b = b + a
        a = b - a
    }
}

self.word ?= b"Hello, World!"

--
#mut #async
function f() {
    return 1;
}

function function_cps(async) {
    return async(1);
}

#async {

}

function sum3(tensor1, tensor2, tensor3): Iterator⟨Integer⟩{
    for i1 in tensor1 {
        for i2, mut j2 in tensor2 {
            for i3, mut j3, ref k3 in tensor3 {
                yield i1 + i2 + i3;
            }
        }
    }
}

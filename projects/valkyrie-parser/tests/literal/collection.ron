NamespaceDeclaration {
    kind: Standalone,
    path: test∷literal,
}
UnaryNode {
    prefix: -,
    base: UnaryNode {
        prefix: -,
        base: tuple,
    },
}
Tuple {
    terms: [],
}
0
Tuple {
    terms: [
        ArgumentTerm {
            key: Nothing,
            value: 1,
        },
    ],
}
Tuple {
    terms: [
        ArgumentTerm {
            key: Nothing,
            value: 1,
        },
        ArgumentTerm {
            key: Nothing,
            value: 2,
        },
    ],
}
Tuple {
    terms: [
        ArgumentTerm {
            key: Nothing,
            value: true,
        },
        ArgumentTerm {
            key: Nothing,
            value: Tuple {
                terms: [
                    ArgumentTerm {
                        key: Nothing,
                        value: false,
                    },
                ],
            },
        },
    ],
}
UnaryNode {
    prefix: -,
    base: UnaryNode {
        prefix: -,
        base: dict,
    },
}
Tuple {
    terms: [
        ArgumentTerm {
            key: Nothing,
            value: 0,
        },
        ArgumentTerm {
            key: Nothing,
            value: 1,
        },
        ArgumentTerm {
            key: Identifier("a", 106..107),
            value: 1,
        },
        ArgumentTerm {
            key: Identifier("z", 112..113),
            value: 26,
        },
    ],
}
Tuple {
    terms: [
        ArgumentTerm {
            key: Identifier("啊", 122..125),
            value: 1,
        },
        ArgumentTerm {
            key: Identifier("吧", 130..133),
            value: 2,
        },
        ArgumentTerm {
            key: Identifier("", 138..143),
            value: 3,
        },
        ArgumentTerm {
            key: Identifier("", 148..153),
            value: 4,
        },
    ],
}
UnaryNode {
    prefix: -,
    base: UnaryNode {
        prefix: -,
        base: list,
    },
}
RangeNode {
    kind: Offset,
    terms: [],
    span: 169..171,
}
RangeNode {
    kind: Offset,
    terms: [
        Index {
            index: 0,
            span: FileSpan {
                start: 175,
                end: 176,
                file: FileID(0xDAEB90FC3D753B45),
            },
        },
    ],
    span: 174..177,
}
RangeNode {
    kind: Offset,
    terms: [
        Index {
            index: 1,
            span: FileSpan {
                start: 181,
                end: 182,
                file: FileID(0xDAEB90FC3D753B45),
            },
        },
    ],
    span: 180..185,
}
RangeNode {
    kind: Offset,
    terms: [
        Index {
            index: 1,
            span: FileSpan {
                start: 189,
                end: 190,
                file: FileID(0xDAEB90FC3D753B45),
            },
        },
        Index {
            index: 2,
            span: FileSpan {
                start: 192,
                end: 193,
                file: FileID(0xDAEB90FC3D753B45),
            },
        },
    ],
    span: 188..194,
}
RangeNode {
    kind: Offset,
    terms: [
        Index {
            index: true,
            span: FileSpan {
                start: 198,
                end: 202,
                file: FileID(0xDAEB90FC3D753B45),
            },
        },
        Index {
            index: RangeNode {
                kind: Offset,
                terms: [
                    Index {
                        index: false,
                        span: FileSpan {
                            start: 205,
                            end: 210,
                            file: FileID(0xDAEB90FC3D753B45),
                        },
                    },
                ],
                span: 204..211,
            },
            span: FileSpan {
                start: 204,
                end: 211,
                file: FileID(0xDAEB90FC3D753B45),
            },
        },
    ],
    span: 197..212,
}
UnaryNode {
    prefix: -,
    base: UnaryNode {
        prefix: -,
        base: range,
    },
}
RangeNode {
    kind: Offset,
    terms: [],
    span: 225..227,
}
RangeNode {
    kind: Offset,
    terms: [
        Range {
            head: None,
            tail: None,
            step: None,
        },
    ],
    span: 230..233,
}
RangeNode {
    kind: Offset,
    terms: [
        Range {
            head: None,
            tail: None,
            step: None,
        },
    ],
    span: 236..240,
}
RangeNode {
    kind: Offset,
    terms: [
        Range {
            head: None,
            tail: None,
            step: None,
        },
    ],
    span: 243..248,
}

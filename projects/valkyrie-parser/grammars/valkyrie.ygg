grammar Valkyrie {

}

entry class Program {
    Statement*
}
// === statements === -----------------------------------------------------------------
union Statement {
    | DefineNamespace
    | DefineImport
}
/// Used to isolate expressions and control whether to output the expression
union EOS ^ {
    | [;；]   #Omit
    | /⁏|;;/  #Show
}
/// Used to isolate expressions, has no practical meaning
class EOS_FREE {
    [,，;；⁏]
}
// === namespace === -----------------------------------------------------------------
class DefineNamespace {
    ^KW_NAMESPACE OP_NAMESPACE? NamepathFree ^EOS?
}
@style(keyword)
class KW_NAMESPACE {
    'namespace'
}
@style(keyword)
union OP_NAMESPACE {
    | '!' #Main
    | '?' #Test
    | '*' #Hide
}
// === import === -----------------------------------------------------------------
atomic class DefineImport {
    | ^KW_IMPORT ~ ImportTerm? ~ ^EOS?
    | ^KW_IMPORT ~ '{' (IGNORED (ImportTerm|^EOS_FREE))* ~ '}' ~ ^EOS?
}
union ImportTerm {
    | ImportAs
    | ImportAll
    | ImportMacro
    | ImportBlock
    | NamepathFree
}
/// `import package∷module∷item as alias`
class ImportAs { NamepathFree ^KW_AS alias:Identifier }
/// `import package∷module∷*`
class ImportAll { NamepathFree /[.∷]|::/ OP_IMPORT_ALL }
/// `import package∷module { ... }`
atomic class ImportBlock  {
    NamepathFree ~ /[.∷]|::/? ~ '{' (IGNORED (ImportTerm|^EOS_FREE))* ~ '}'
}
/// `import package::module::#macro as @macro`
class ImportMacro  {
    NamepathFree /[.∷]|::/ ImportMacroItem ^KW_AS alias:ImportMacroItem
}
atomic union ImportMacroItem {
    | '#' Identifier #Capture
    | '@' Identifier #Instant
}

@style(keyword)
group {
    KW_IMPORT: 'using'
    OP_IMPORT_ALL: '*'
}
// === classes ===


//define_class
//    : template_call? annotation* modifiers KW_CLASS identifier define_generic? class_inherit? type_hint? class_block eos?
//    ;
//class_block: BRACE_L (class_dsl | class_method | class_field | eos_free)* BRACE_R;
//class_inherit
//    : PARENTHESES_L PARENTHESES_R
//    | PARENTHESES_L class_inherit_item (COMMA class_inherit_item)* COMMA? PARENTHESES_R
//    ;
//class_inherit_item: modified_namepath;
//class_field:        annotation* modified_identifier type_hint? parameter_default?;
//class_method
//    : annotation* modified_namepath define_generic? function_parameters return_type? function_block?
//    ;
//class_dsl: annotation* modified_identifier class_block;


// === identifier === --------------------------------------------------------------------------------------------------

@style(keyword)
class KW_CLASS {
    'class'
}
// === identifier === --------------------------------------------------------------------------------------------------

@style(keyword)
class KW_UNION {
    'union'
}
// === identifier === --------------------------------------------------------------------------------------------------

@style(keyword)
class KW_TRAIT {
    'trait'
}
// === identifier === --------------------------------------------------------------------------------------------------
atomic class NamepathFree -> Namepath {
    Identifier (IGNORED /[.∷]|::/ ~ Identifier)*
}
atomic class Namepath {
    Identifier (IGNORED /∷|::/ ~ Identifier)*
}
atomic union Identifier {
    | IdentifierBare
    | IdentifierRaw
}
text class IdentifierBare {
    /[_\p{XID_start}]\p{XID_continue}*/
}
atomic class IdentifierRaw {
    '`' IdentifierRawText '`'
}
text class IdentifierRawText {
    [^`]+
}

union Boolean {
    | 'true'  #True
    | 'false' #False
}
// === number === ----------------------------------------------------------------------------------------------------
text class Integer {
    /0|[1-9][0-9]*/
}
class RangeExact {
    '{' Integer '}'
}
class Range {
    '{' (min:Integer)? ',' (max:Integer)? '}'
}
// === keywords === ----------------------------------------------------------------------------------------------------
atomic class ModifierCall ^ {
    !(KW_CLASS | KW_UNION | KW_TRAIT) ^Identifier
}
group {
    KW_AS: 'as'
}
// === ignores === -----------------------------------------------------------------------------------------------------
@railroad(false)
ignore class WhiteSpace {
    /\p{White_Space}+/
}
@style(comment)
@railroad(false)
ignore class Comment {
    | '//' /[^\n\r]*/
    | '/*'  '*/'
}

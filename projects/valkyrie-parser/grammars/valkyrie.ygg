grammar Valkyrie {

}

entry class Program {
    Statement*
}
// === statements === -----------------------------------------------------------------
union Statement {
    | DefineNamespace
    | DefineImport
}
/// Used to isolate expressions and control whether to output the expression
union EOS ^ {
    | [;；]   #Omit
    | /⁏|;;/  #Show
}
/// Used to isolate expressions, has no practical meaning
class EOS_FREE {
    [,，;；⁏]
}
// === namespace === -----------------------------------------------------------------
class DefineNamespace {
    ^KW_NAMESPACE OP_NAMESPACE? NamepathFree ^EOS?
}

@style(keyword)
union OP_NAMESPACE {
    | '!' #Main
    | '?' #Test
    | '*' #Hide
}
// === import === -----------------------------------------------------------------
atomic class DefineImport {
    | ^KW_IMPORT ~ ImportTerm? ~ ^EOS?
    | ^KW_IMPORT ~ '{' (IGNORED (ImportTerm|^EOS_FREE))* ~ '}' ~ ^EOS?
}
union ImportTerm {
    | ImportAs
    | ImportAll
    | ImportMacro
    | ImportBlock
    | NamepathFree
}
/// `import package∷module∷item as alias`
class ImportAs { NamepathFree ^KW_AS alias:Identifier }
/// `import package∷module∷*`
class ImportAll { NamepathFree /[.∷]|::/ OP_IMPORT_ALL }
/// `import package∷module { ... }`
atomic class ImportBlock  {
    NamepathFree ~ /[.∷]|::/? ~ '{' (IGNORED (ImportTerm|^EOS_FREE))* ~ '}'
}
/// `import package::module::#macro as @macro`
class ImportMacro  {
    NamepathFree /[.∷]|::/ ImportMacroItem ^KW_AS alias:ImportMacroItem
}
atomic union ImportMacroItem {
    | '#' Identifier #Capture
    | '@' Identifier #Instant
}

// === classes === -----------------------------------------------------------------------------------------------------
class DefineClass {
    DefineTemplate? //Annotation* ModifiedIdentifier DefineGeneric? TypeHint?
    KW_CLASS Identifier ClassInherit? ClassBlock ^EOS?
}
class ClassBlock {
    '{' ClassBlockItem* '}'
}
union ClassBlockItem {
    | ClassDomain
    | ClassMethod
    | ClassField
    | EOS_FREE
}
class ClassInherit {
    '(' (ClassInheritItem (',' ClassInheritItem)* ','?)? ')'
}
class ClassInheritItem {
    Namepath
}
class ClassField {
    Identifier
    //Annotation* ModifiedIdentifier
    //    TypeHint? ParameterDefault?
}
class ClassMethod {
    //Annotation* ModifiedNamepath
    //    DefineGeneric? FunctionParameters Return? FunctionBlock?
    Identifier '(' ')'
}
class ClassDomain {
    //Annotation* ModifiedIdentifier
    Identifier ClassBlock
}
// === template === ----------------------------------------------------------------------------------------------------
class DefineTemplate {
    // annotation* modifiers
    KW_TEMPLATE TemplateParameters? TemplateBlock
}
class TemplateParameters {
    | Identifier (COMMA Identifier)* COMMA?
    | '<' Identifier (COMMA Identifier)* COMMA? '>'
    | '⟨' Identifier (COMMA Identifier)* COMMA? '⟩'
}
class TemplateBlock {
    '{' (TemplateStatement | TemplateImplements | EOS_FREE)* '}'
}
class TemplateStatement {
    WhereBlock
    //  | KW_RETURN TypeExpression
    //  | Identifier RequireBlock
}
class TemplateImplements {
      KW_IMPLEMENTS // TypeExpression
}
class WhereBlock {
    KW_WHERE '{' WhereBound* '}'
}
class WhereBound {
    //    | Identifier COLON TypeExpression
    | EOS_FREE
}
//class RequireBlock {
//    '{' (ExpressionRoot | EOS_FREE)* '}'
//}
// === identifier === --------------------------------------------------------------------------------------------------
@style(keyword)
class KW_CLASS {
    | 'class'
    | 'structure'
}


// === identifier === --------------------------------------------------------------------------------------------------

@style(keyword)
class KW_UNION {
    'union'
}
// === identifier === --------------------------------------------------------------------------------------------------

@style(keyword)
class KW_TRAIT {
    'trait'
}
// === identifier === --------------------------------------------------------------------------------------------------
atomic class MainExpression {
    MainTerm (IGNORED MainInfix ~ MainTerm)*
}
atomic class MainTerm {
    (MainPrefix IGNORED)* MainFactor (IGNORED MainSuffix)*
}
atomic union MainFactor {
    | '(' MainExpression ')'
    | Namepath
    | Integer
    | Boolean
}
@style(operator)
atomic union MainInfix ^ {
    | '+'  #Plus
    | '+=' #PlusAssign
    | '-'  #Minus
    | '-=' #MinusAssign
    | '*'  #Multiply
    | '*=' #MultiplyAssign
    | '/'  #Divide
    | '/=' #DivideAssign
    | '%'  #Remainder
    | '%=' #RemainderAssign
    | '^'  #Power
    | '√'  #Surd
    // start with `<, >`
    | /⋘|<<</   #LLL
    | /<<=/      #LLE
    | /≪|<</     #LL
    | /[⩽≤]|<=/  #LEQ
    | /</        #LE
    | /⋙|>>>/   #GGG
    | />>=/      #GGE
    | /≫|>>/     #GG
    | /[⩾≥]|>=/  #GEQ
    | />/ #GE
    // start with `=, !`
    | /≡|===/     #EEE
    | /≢|!==|=!=/ #NEE
    | /≠|!=/      #NE
    | /=/         #EQ
    // start with `.`
    | '..<'       #UpTo
    | '..='       #Until
    // start with `&`
    | (KW_IN | [∈∊])       #In
    | (KW_NOT ~ KW_IN|'∉') #NotIn
    | [∋∍]                 #Contains
    | '∌'                  #NotContains
    // start with `@`
    | ('/@'|[⇴⨵]) #Map
    | (/@{3}|⟴/)  #Apply3
    | (/@{2}|⊕/)  #Apply2
}
atomic union MainPrefix {
    | [¬!]       #Not
    | [+]        #Positive
    | [-]        #Negative
    | [&]        #Reference
    | /…|[.]{3}/ #DeconstructAll
    | /‥|[.]{2}/ #Deconstruct
    | '⅟'        #Inverse
    | '√'        #Root2
    | '∛'        #Root3
    | '∜'        #Root4
    | [*]        #Dereference
}
union MainSuffix {
    | '!'  #Raise
    | '%'  #Percent2
    | '‰'  #Percent3
    | '‱' #Percent4
    | '′'  #Prime1
    | '″'  #Prime2
    | '‴'  #Prime3
    | '⁗'  #Prime4
    | '℃'  #Celsius
    | '℉'  #Fahrenheit
}
// === identifier === --------------------------------------------------------------------------------------------------
atomic class NamepathFree  {
    Identifier (IGNORED /[.∷]|::/ ~ Identifier)*
}
atomic class Namepath {
    Identifier (IGNORED /∷|::/ ~ Identifier)*
}
atomic union Identifier {
    | IdentifierBare
    | IdentifierRaw
}
text class IdentifierBare {
    /[_\p{XID_start}]\p{XID_continue}*/
}
atomic class IdentifierRaw {
    '`' IdentifierRawText '`'
}
text class IdentifierRawText {
    [^`]+
}

union Boolean {
    | 'true'  #True
    | 'false' #False
}
// === number === ----------------------------------------------------------------------------------------------------
text class Integer {
    /0|[1-9][0-9]*/
}
class RangeExact {
    '{' Integer '}'
}
class Range {
    '{' (min:Integer)? ',' (max:Integer)? '}'
}
// === keywords === ----------------------------------------------------------------------------------------------------
atomic class ModifierCall ^ {
    !(KW_CLASS | KW_UNION | KW_TRAIT) ^Identifier
}
token {
    COMMA: [,，]
}
@style(keyword)
token {
    OP_IMPORT_ALL: '*'
    OP_BIND: /≔|:=/
}
@railway(false)
@style(keyword)
token {
    KW_NAMESPACE: /namespace/
    KW_IMPORT: /using/
    KW_TEMPLATE: /template|generic/
    KW_WHERE: /where/
    KW_TRAIT: /trait|interface/
    KW_IMPLEMENTS: /implements?/
    KW_EXTENDS: /extends?/
    KW_INHERITS: /inherits?/
    // control
    KW_IF: /if/
    KW_ELSE: /else/
    KW_WHILE: /while/
    KW_FOR: /for/
    KW_RETURN: /return/
    KW_BREAK: /break/
    KW_CONTINUE: /continue/
    // === operators === -----------------------------------------------------------------------------------------------
    KW_AS: 'as'
    KW_IN: 'in'
    KW_NOT: 'not'
}
// === ignores === -----------------------------------------------------------------------------------------------------
@railroad(false)
ignore class WhiteSpace {
    /\p{White_Space}+/
}
@style(comment)
@railroad(false)
ignore class Comment {
    | '//' /[^\n\r]*/
    | '/*'  '*/'
}

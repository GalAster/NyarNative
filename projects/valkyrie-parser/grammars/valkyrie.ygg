grammar Valkyrie {

}

entry class Program {
    Statement*
}
// === statements === -----------------------------------------------------------------
union Statement {
    | DefineNamespace
    | DefineImport
    | DefineClass
    | DefineUnion
    | DefineFlags
    | DefineTrait
    | DefineFunction
    | MainStatement
}
/// Used to isolate expressions and control whether to output the expression
union EOS ^ {
    | [;；]   #Omit
    | /⁏|;;/  #Show
}
/// Used to isolate expressions, has no practical meaning
class EOS_FREE {
    [,，;；⁏]
}
// === namespace === -----------------------------------------------------------------
class DefineNamespace {
    ^KW_NAMESPACE OP_NAMESPACE? NamepathFree ^EOS?
}

@style(keyword)
union OP_NAMESPACE {
    | '!' #Main
    | '?' #Test
    | '*' #Hide
}
// === import === -----------------------------------------------------------------
atomic class DefineImport {
    | ^KW_IMPORT ~ ImportTerm? ~ ^EOS?
    | ^KW_IMPORT ~ '{' (HIDE (ImportTerm|^EOS_FREE))* ~ '}' ~ ^EOS?
}
union ImportTerm {
    | ImportAs
    | ImportAll
    | ImportMacro
    | ImportBlock
    | NamepathFree
}
/// `import package∷module∷item as alias`
class ImportAs { NamepathFree ^KW_AS alias:Identifier }
/// `import package∷module∷*`
class ImportAll { NamepathFree /[.∷]|::/ OP_IMPORT_ALL }
/// `import package∷module { ... }`
atomic class ImportBlock  {
    NamepathFree ~ /[.∷]|::/? ~ '{' (HIDE (ImportTerm|^EOS_FREE))* ~ '}'
}
/// `import package::module::#macro as @macro`
class ImportMacro  {
    NamepathFree /[.∷]|::/ ImportMacroItem ^KW_AS alias:ImportMacroItem
}
atomic union ImportMacroItem {
    | '#' Identifier #Capture
    | '@' Identifier #Instant
}
// === template === ----------------------------------------------------------------------------------------------------
class DefineTemplate {
    AttributeCall* ModifierCall*
    KW_TEMPLATE TemplateParameters? TemplateBlock
}
class TemplateParameters {
    | Identifier (^COMMA Identifier)* ^COMMA?
    | '<' Identifier (^COMMA Identifier)* ^COMMA? '>'
    | '⟨' Identifier (^COMMA Identifier)* ^COMMA? '⟩'
}
class TemplateBlock {
    '{' (TemplateStatement | TemplateImplements | EOS_FREE)* '}'
}
class TemplateStatement {
    WhereBlock
    //  | KW_RETURN TypeExpression
    //  | Identifier RequireBlock
}
class TemplateImplements {
      KW_IMPLEMENTS // TypeExpression
}
class WhereBlock {
    KW_WHERE '{' WhereBound* '}'
}
class WhereBound {
    //    | Identifier COLON TypeExpression
    | EOS_FREE
}
//class RequireBlock {
//    '{' (ExpressionRoot | EOS_FREE)* '}'
//}
// === classes === -----------------------------------------------------------------------------------------------------
class DefineClass {
    DefineTemplate? AttributeCall* ModifierCall*
    KW_CLASS Identifier ClassInherit? ClassBlock ^EOS?
}
class ClassBlock {
    '{' ClassBlockItem* '}'
}
union ClassBlockItem {
    | ClassDomain
    | ClassMethod
    | ClassField
    | EOS_FREE
}
class ClassInherit {
    '(' (ClassInheritItem (',' ClassInheritItem)* ','?)? ')'
}
class ClassInheritItem {
    Namepath
}
class ClassField {
    AttributeCall* field_modifier*
    Identifier TypeHint? ParameterDefault?
}
atomic inline class field_modifier {
    !(^Namepath ~ [:=};]) ModifierCall
}
class ParameterDefault {
    '=' MainExpression
}
class ClassMethod {
    AttributeCall* method_modifier* Namepath
    '(' ')'
    // DefineGeneric? FunctionParameters ReturnType? FunctionBlock?
}
atomic inline class method_modifier {
    !(^Namepath ~ [(<:}]) ModifierCall
}
class ClassDomain {
    AttributeCall* field_modifier*
    Identifier ClassBlock
}
@style(keyword)
union KW_CLASS {
    | 'class'     #Class
    | 'structure' #Structure
}
// === identifier === --------------------------------------------------------------------------------------------------
class DefineUnion {
    AttributeCall* KW_UNION Identifier
}
@style(keyword)
class KW_UNION {
    'union'
}
// === identifier === --------------------------------------------------------------------------------------------------
class DefineFlags {
    AttributeCall* KW_FLAGS Identifier
}
@style(keyword)
class KW_FLAGS {
    'flags'
}
// === identifier === --------------------------------------------------------------------------------------------------
class DefineTrait {
    KW_TRAIT
}
@style(keyword)
union KW_TRAIT {
    | 'trait'     #Trait
    | 'interface' #Interface
}
// === identifier === --------------------------------------------------------------------------------------------------
class DefineFunction {
    KW_FUNCTION Namepath
}
@style(keyword)
union KW_FUNCTION {
    | /micro|function/ #Micro
    | 'macro'          #Macro
}
// === while loop === --------------------------------------------------------------------------------------------------
class WhileStatement {
    KW_WHILE InlineExpression? '{' MainStatement* '}' ^EOS?
}
@style(keyword)
union KW_WHILE {
    | 'while' #While
    | 'until' #Until
}
// === for loop === ----------------------------------------------------------------------------------------------------
class ForStatement {
    KW_FOR Identifier KW_IN InlineExpression? '{' MainStatement* '}' ^EOS?
}
// === expression === --------------------------------------------------------------------------------------------------
atomic union MainStatement {
    | WhileStatement
    | ForStatement
    | MainExpression
}
// === expression === --------------------------------------------------------------------------------------------------
atomic class MainExpression {
    MainTerm (HIDE MainInfix ~ MainTerm)* EOS?
}
atomic class MainTerm {
    (MainPrefix HIDE)* MainFactor MainSuffix*
}

atomic union MainFactor {
    | '(' ~ MainExpression ~ ')'
    | Atomic
}
union Atomic {
    | ProceduralCall
    | TupleLiteral
    | RangeLiteral
    | Namepath
    | Integer
    | Boolean
}
@railway(false)
@style(operator)
atomic union MainInfix ^ {
    | '+'  #Plus
    | '+=' #PlusAssign
    | '-'  #Minus
    | '-=' #MinusAssign
    | '*'  #Multiply
    | '*=' #MultiplyAssign
    | '/'  #Divide
    | '/=' #DivideAssign
    | '%'  #Remainder
    | '%=' #RemainderAssign
    | '^'  #Power
    | '√'  #Surd
    // start with `=, !`
    | /≡|===/     #EEE
    | /≢|!==|=!=/ #NEE
    | /≠|!=/      #NE
    | /==/        #EE
    | /=/         #EQ
    // start with `<, >`
    | /⋘|<<</   #LLL
    | /<<=/      #LLE
    | /≪|<</     #LL
    | /[⩽≤]|<=/  #LEQ
    | /</        #LE
    | /⋙|>>>/   #GGG
    | />>=/      #GGE
    | /≫|>>/     #GG
    | /[⩾≥]|>=/  #GEQ
    | />/ #GE
    // logical
    | /&&|∧/ #And
    | /⊼/ #Nand
    | /⩟/ #Xand // xnor
    | /\|\||∨/ #Or
    | /⊽/ #Nor
    | /⊻/ #Xor
    // start with `.`
    | '..<'       #UpTo
    | '..='       #Until
    // in, not in
    | (KW_IN | [∈∊])       #In
    | (KW_NOT ~ KW_IN|'∉') #NotIn
    | [∋∍]                 #Contains
    | '∌'                  #NotContains
    // is, is not
    | KW_IS          #Is
    | KW_IS ~ KW_NOT #NotIs
    // start with `@`
    | ('/@'|[⇴⨵]) #Map
    | /@{3}|⟴/  #Apply3
    | /@{2}|⊕/  #Apply2
}
@railway(false)
atomic union MainPrefix {
    | [¬!]       #Not
    | [+]        #Positive
    | [-]        #Negative
    | [&]        #Reference
    | /…|[.]{3}/ #DeconstructAll
    | /‥|[.]{2}/ #Deconstruct
    | '⅟'        #Inverse
    | '√'        #Root2
    | '∛'        #Root3
    | '∜'        #Root4
    | [*]        #Dereference
}
@railway(false)
atomic union MainSuffix {
    | InlineSuffix
}
// === inline expression === --------------------------------------------------------------------------------------------------
atomic class InlineExpression {
    InlineTerm (HIDE MainInfix ~ InlineTerm)*
}
atomic class InlineTerm {
    (MainPrefix HIDE)* MainFactor InlineSuffix*
}
atomic union InlineSuffix {
    | HIDE SuffixOperator
    | TupleCall
    | RangeCall
}
@railway(false)
union SuffixOperator {
    | '!'  #Raise
    | '%'  #Percent2
    | '‰'  #Percent3
    | '‱' #Percent4
    | '′'  #Prime1
    | '″'  #Prime2
    | '‴'  #Prime3
    | '⁗'  #Prime4
    | '℃'  #Celsius
    | '℉'  #Fahrenheit
}
// === identifier === --------------------------------------------------------------------------------------------------
class TypeHint {
    COLON TypeExpression
}
atomic class TypeExpression {
    TypeTerm (HIDE TypeInfix ~ TypeTerm)*
}
atomic class TypeTerm {
    (TypePrefix HIDE)* MainFactor TypeSuffix*
}
atomic union TypeFactor {
    | '(' ~ TypeExpression ~ ')'
    | Atomic
}
@style(operator)
atomic union TypeInfix ^ {
    | '|'  #Union
}
atomic union TypePrefix {
    | [+]        #Positive
    | [-]        #Negative
}
atomic union TypeSuffix {
    | '?' #Option
}
// === tuple === --------------------------------------------------------------------------------------------------
atomic class TupleCall {
     WhiteSpace? OP_AND_THEN? WhiteSpace? TupleLiteral
}
class TupleLiteral {
    '(' (TuplePair (^COMMA TuplePair)* ^COMMA?)? ')'
}
class TuplePair {
    (TupleKey Colon)? MainExpression
}
union TupleKey {
    | Identifier
}
// === range === --------------------------------------------------------------------------------------------------
atomic class RangeCall {
    WhiteSpace? OP_AND_THEN? WhiteSpace? RangeLiteral
}
atomic class RangeLiteral {
    | '[' ~ (SubscriptAxis (HIDE ^COMMA ~ SubscriptAxis)* ~ ^COMMA?)? ~ ']'
    | '⁅' ~ (SubscriptAxis (HIDE ^COMMA ~ SubscriptAxis)* ~ ^COMMA?)? ~ '⁆'
}
union SubscriptAxis {
    | SubscriptRange
    | SubscriptOnly
}
class SubscriptOnly {
    index:MainExpression
}
atomic class SubscriptRange ^ {
    (head:MainExpression HIDE)? (
        | RangeOmit (HIDE step:MainExpression)?
        | COLON (HIDE tail:MainExpression (HIDE COLON (HIDE step:MainExpression)?)?)?
    )
}
atomic inline class RangeOmit {
    PROPORTION | COLON ~ COLON
}
// === annotation === --------------------------------------------------------------------------------------------------
class AttributeCall {
    // #call(...)
    AttributePath TupleLiteral?
}
class ProceduralCall {
    // @call(...)
    ProceduralPath TupleLiteral?
}
// === identifier === --------------------------------------------------------------------------------------------------
atomic class ModifierCall ^ {
    !(KW_CLASS | KW_UNION | KW_TRAIT) ^Identifier
}
atomic class AttributePath {
    '#' Namepath
}
atomic class ProceduralPath {
    '@' Namepath
}
atomic class NamepathFree  {
    Identifier (HIDE ^PROPORTION2 ~ Identifier)*
}
atomic class Namepath {
    Identifier (HIDE ^PROPORTION ~ Identifier)*
}
atomic union Identifier {
    | IdentifierBare
    | IdentifierRaw
}
text class IdentifierBare {
    /[_\p{XID_start}]\p{XID_continue}*/
}
atomic class IdentifierRaw {
    '`' IdentifierRawText '`'
}
text class IdentifierRawText {
    [^`]+
}
union Boolean {
    | 'true'  #True
    | 'false' #False
}
// === number === ----------------------------------------------------------------------------------------------------
text class Integer {
    /0|[1-9][0-9]*/
}
// === keywords === ----------------------------------------------------------------------------------------------------
@railway(false)
token {
    PROPORTION: /∷|::/
    COLON: [:：]
    COMMA: [,，]
    DOT:   [.．]
    OFFSET_L: '⁅'
    OFFSET_R: '⁆'
}
class PROPORTION2 -> PROPORTION {
    /[.．∷]|::/
}
@railway(false)
@style(keyword)
token {
    OP_IMPORT_ALL: '*'
    OP_AND_THEN: '?'
    OP_BIND: /≔|:=/
}
@railway(false)
@style(keyword)
token {
    KW_NAMESPACE: /namespace/
    KW_IMPORT: /using/
    KW_TEMPLATE: /template|generic/
    KW_WHERE: /where/
    KW_TRAIT: /trait|interface/
    KW_IMPLEMENTS: /implements?/
    KW_EXTENDS: /extends?/
    KW_INHERITS: /inherits?/
    // control
    KW_IF: /if/
    KW_ELSE: /else/
    KW_WHILE: /while/
    KW_FOR: /for/
    KW_RETURN: /return/
    KW_BREAK: /break/
    KW_CONTINUE: /continue/
    // === operators === -----------------------------------------------------------------------------------------------
    KW_NOT: 'not'
    KW_IN: 'in'
    KW_IS: 'is'
    KW_AS: 'as'
}
// === ignores === -----------------------------------------------------------------------------------------------------
@railway(false)
hide class WhiteSpace {
    /\p{White_Space}+/
}
@style(comment)
@railway(false)
hide class Comment {
    | '//' /[^\n\r]*/
    | '/*'  '*/'
}

namespace package.io;

#ffi("wasi:io/streams", "input-stream")
resource class InputStream {
    #ffi("wasi:io/streams", "[method]output-stream.blocking-write-and-flush")
    write(self, contents: List<u8>) -> Result<(), StreamError>;
}

#ffi("wasi:io/streams", "output-stream")
resource class OutputStream {
    #ffi("wasi:io/streams", "[method]output-stream.blocking-write-and-flush")
    write(self, contents: List<u8>) -> Result<(), StreamError>;
}

#ffi("wasi:io/error", "error")
resource class IoError { }

union StreamError {
    LastOperationFailed {
        error: IoError
    },
    Closed
}

#ffi("wasi:cli/stdin", "get-stdin")
function standard_input() -> InputStream { }

#ffi("wasi:cli/stdout", "get-stdout")
function standard_output() -> OutputStream { }

#ffi("wasi:cli/stderr", "get-stderr")
function standard_error() -> OutputStream { }






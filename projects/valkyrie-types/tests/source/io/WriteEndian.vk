namespace package.io

trait WriteEndian: WriteBuffer {
    final inline write_u8(mut self, value: u8, endian: Endian) -> Result< (), StreamError > {
        self.write_buffer((value, ))
    }
    final inline write_u16(mut self, value: u16, endian: Endian) -> Result< (), StreamError > {
        match endian {
            case Endian::Big:
                self.write_buffer((
                value.bit_shr(8) as u8,
                value as u8,
                ))
            case Endian::Little:
                self.write_buffer((
                value as u8,
                value.bit_shr(8) as u8,
                ))
        }
    }
    final inline write_u32(mut self, value: u32, endian: Endian) -> Result< (), StreamError > {
        match endian {
            case Endian::Big:
                self.write_buffer((
                value.bit_shr(24) as u8,
                value.bit_shr(16) as u8,
                value.bit_shr(8) as u8,
                value as u8,
                ))
            case Endian::Little:
                self.write_buffer((
                value as u8,
                value.bit_shr(8) as u8,
                value.bit_shr(16) as u8,
                value.bit_shr(24) as u8,
                ))
        }
    }
    final inline write_u64(mut self, value: u64, endian: Endian) -> Result< (), StreamError > {
        match endian {
            case Endian::Big:
                self.write_buffer((
                value.bit_shr(56) as u8,
                value.bit_shr(48) as u8,
                value.bit_shr(40) as u8,
                value.bit_shr(32) as u8,
                value.bit_shr(24) as u8,
                value.bit_shr(16) as u8,
                value.bit_shr(8) as u8,
                value as u8,
                ))
            case Endian::Little:
                self.write_buffer((
                value as u8,
                value.bit_shr(8) as u8,
                value.bit_shr(16) as u8,
                value.bit_shr(24) as u8,
                value.bit_shr(32) as u8,
                value.bit_shr(40) as u8,
                value.bit_shr(48) as u8,
                value.bit_shr(56) as u8,
                ))
        }
    }
    final inline write_i8(mut self, value: i8) -> Result< (), StreamError > {
        self.write_u8(value as u8, endian)
    }
    final inline write_i16(mut self, value: i16, endian: Endian) -> Result< (), StreamError > {
        self.write_u16(value as u16, endian)
    }
    final inline write_i32(mut self, value: i32, endian: Endian) -> Result< (), StreamError > {
        self.write_u32(value as u32, endian)
    }
    final inline write_i64(mut self, value: i64, endian: Endian) -> Result< (), StreamError > {
        self.write_u64(value as u64, endian)
    }
    final inline write_f32(mut self, value: f32, endian: Endian) -> Result< (), StreamError > {
        self.write_u32(transmute< u32 >(value), endian)
    }
    final inline write_f64(mut self, value: f64, endian: Endian) -> Result< (), StreamError > {
        self.write_u64(transmute< u64 >(value), endian)
    }
}